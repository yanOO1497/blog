{"title":"关于 typescript 学习手记（三）类型推断","date":"2019-09-22T04:22:54.000Z","link":"post/typescript","tags":["typescript"],"updated":"2021-06-12T10:38:30.362Z","content":"<h2 id=\"基础类型推断\">基础类型推断<a href=\"post/typescript#基础类型推断\"></a></h2><p>在变量声明、函数参数声明时，ts 会根据初始值自动推断出变量或参数的类型<br>如果觉得 ts 的类型断言不符合自己预期，可以手动给类型添加类型断言</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Foo &#123;</span><br><span class=\"line\">    bar: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;&#125; <span class=\"keyword\">as</span> Foo; <span class=\"comment\">// 利用手动类型断言来避免 ts 报错，但是不是最佳方案，因为这意味着 bar 属性没有被添加时也不会报错</span></span><br><span class=\"line\">foo.bar = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 推荐写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo: Foo = &#123;</span><br><span class=\"line\">    bar: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"类型兼容性\">类型兼容性<a href=\"post/typescript#类型兼容性\"></a></h2><p>鸭式辩型，原类型必须具备目标类型的必要属性就可以进行赋值。</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接口兼容性，成员少的会兼容成员多的</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> X &#123;</span><br><span class=\"line\">    a: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    b: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> Y &#123;</span><br><span class=\"line\">    a: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    b: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    c: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> x: X = &#123;a: <span class=\"number\">1</span>, b: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y: Y = &#123;a: <span class=\"number\">1</span>, b: <span class=\"number\">2</span>, c: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">x = y; <span class=\"comment\">// 符合 ts 规则</span></span><br><span class=\"line\"><span class=\"comment\">// y = x; 不符合</span></span><br></pre></td></tr></table></div></figure>\n\n<p>函数兼容性</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Handler = <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hof</span>(<span class=\"params\">handler: Handler</span>) = </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1) 参数个数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler1 = <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;&#125;</span><br><span class=\"line\">hof(handler1); <span class=\"comment\">// 运行正常</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler2 = <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span>, c: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// hof(handler2) 检查不通过</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2) 参数类型（必须匹配）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> handler3 = <span class=\"function\">(<span class=\"params\">a: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// hof(handler3) 不通过</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3) 返回值类型</span></span><br><span class=\"line\"><span class=\"comment\">// 原返回值必须与目标类型的返回值一致，或者目标类型的返回值需要为原返回值的子类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#123;name: <span class=\"string\">'test'</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> g = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#123;name: <span class=\"string\">'test'</span>. location: <span class=\"string\">'Xiamen'</span>&#125;&#125;</span><br><span class=\"line\">f = g;</span><br><span class=\"line\"><span class=\"comment\">// g = f;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>枚举类型兼容性</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eunm Fruit &#123;Apple, Banana&#125;</span><br><span class=\"line\">eunm Color &#123;Red, Yellow&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>类兼容性</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类的构造函数与静态成员是不作为比较的，如果类有私有成员那么两个类不兼容</span></span><br></pre></td></tr></table></div></figure>\n\n<p>泛型兼容性</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 类型保护机制</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">ts 能够在特定区块内保证变量属于某种确定的类型。可以在此区块内放心的引用此了下的属性，或者调用此类型的方法。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>ts</span><br><span class=\"line\">强制类型断言</span><br><span class=\"line\"><span class=\"keyword\">let</span> lang = <span class=\"keyword\">type</span> === Type.String ? <span class=\"keyword\">new</span> Java() : <span class=\"keyword\">new</span> Javascript();</span><br><span class=\"line\"><span class=\"comment\">// instance</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (lang instance Java) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在这个区块内， lan 会被认定为是 java 的实例</span></span><br><span class=\"line\">    lang.helloJava();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// in</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'java'</span> <span class=\"keyword\">in</span> lang) &#123;</span><br><span class=\"line\">    lang.hellowJava();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// typeof</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"周记(2019-9-16 —— 2019-9-22)","link":"post/2019-9-22-notes"},"next":{"title":"《TypeScript Deep Dive》（一）——English Learning Weekly","link":"post/2019-9-21-word"},"plink":"https://yanoo1497.github.io/post/typescript/","toc":[{"title":"基础类型推断","id":"基础类型推断","index":"1"},{"title":"类型兼容性","id":"类型兼容性","index":"2"}]}