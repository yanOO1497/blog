{"title":"算法系列 —— 二分查找","date":"2020-02-12T14:12:52.000Z","link":"post/binary-search","tags":["algorithm"],"updated":"2021-06-12T10:38:29.427Z","content":"<h2 id=\"适合二分查找的数据类型：\">适合二分查找的数据类型：<a href=\"post/binary-search#适合二分查找的数据类型：\"></a></h2><ol>\n<li>Sorted （有序的，单调递增或者递减）</li>\n<li>Bounded （存在上下界）</li>\n<li>Accessible by index （能够直接跳过索引访问，例如数组，而链表的数据结构就不适合二分法）</li>\n</ol>\n<p>时间复杂度： log(n)</p>\n<h2 id=\"代码实现\">代码实现<a href=\"post/binary-search#代码实现\"></a></h2><!-- binary-search.js -->\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; target</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; arr sorted array</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns &#123;number&#125; index of target in arr or -1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">target, arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            mid = <span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>); <span class=\"comment\">// 注意要取整</span></span><br><span class=\"line\">            <span class=\"comment\">// 优化版写法</span></span><br><span class=\"line\">            <span class=\"comment\">// mid = Math.floor(left + (right - left) / 2); 可避免数值过大时的越界溢出</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(left, right, mid, arr[mid]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[mid] === target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &lt; target) &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &gt; target) &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(left &lt;= right)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"例题\">例题<a href=\"post/binary-search#例题\"></a></h2><h3 id=\"leecode-69-实现一个求平方根的函数\">leecode 69 实现一个求平方根的函数<a href=\"post/binary-search#leecode-69-实现一个求平方根的函数\"></a></h3><p>解题思路：</p>\n<ol>\n<li><p>二分法<br>代码实现</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 二分法</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; x </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; precision 精确度,小数点位数 （0-20）</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sqrtBinary</span>(<span class=\"params\">x, precision</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 负数没有平方根</span></span><br><span class=\"line\">        <span class=\"comment\">// console.error('...')</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 简单特殊值直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x === <span class=\"number\">0</span> || x === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// // 对传入的小数点位数做处理</span></span><br><span class=\"line\">    <span class=\"comment\">// if (precision &lt; 0) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     precision = 0;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125; else if (precision &gt; 20) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     precision = 20;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125; else &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     precision = Math.floor(precision);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 实际精确值</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> preci = <span class=\"built_in\">Math</span>.pow(<span class=\"number\">10</span>, -precision);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r = x;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (r - l &gt;= preci) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> m = l + (r - l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 注意使用 m 与 x / m 做比较而不是 m * m 可以避免越界</span></span><br><span class=\"line\">        res = m;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(m - x / m) &lt;= preci) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((m - x / m) &gt; preci) &#123;</span><br><span class=\"line\">            r = m;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((m - x / m) &lt; - preci) &#123;</span><br><span class=\"line\">            l = m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>(res.toFixed(precision));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>牛顿迭代法（计算机内部常用，主要是利用 y = x平方 的公式，不断循环找到对逼近的点</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 牛顿迭代法，需要先自行推导公式</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;*&#125; x </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;*&#125; precision </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sqrt</span>(<span class=\"params\">x, precision</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> preci = <span class=\"built_in\">Math</span>.pow(<span class=\"number\">10</span>, -precision);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = x;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( res * res - x &gt; preci &amp;&amp; temp &lt; <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">        res = (res + x / res) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>(res.toFixed(precision));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"你可能不知道的 vscode 使用技巧","link":"post/你可能不知道的vscode使用技巧"},"next":{"title":"2020 春节周记","link":"post/weekly"},"plink":"https://yanoo1497.github.io/post/binary-search/","toc":[{"title":"适合二分查找的数据类型：","id":"适合二分查找的数据类型：","index":"1"},{"title":"代码实现","id":"代码实现","index":"2"},{"title":"例题","id":"例题","index":"3","children":[{"title":"leecode 69 实现一个求平方根的函数","id":"leecode-69-实现一个求平方根的函数","index":"3.1"}]}]}