{"title":"关于 typescript 学习手记（二）接口声明","date":"2019-09-07T11:49:19.000Z","link":"post/post-1","tags":["typescript"],"updated":"2019-09-07T11:50:52.411Z","content":"<h4 id=\"函数类型接口\">函数类型接口<a href=\"post/post-1#函数类型接口\"></a></h4><figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用实现直接定义了接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x: numver, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 三种不同的函数接口定义方式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> add (x: numver, y: <span class=\"built_in\">number</span>) =&gt; <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Add &#123;</span><br><span class=\"line\">    (x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>): <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Add = <span class=\"function\">(<span class=\"params\">x: numver, y: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> add: Add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"对象类型接口\">对象类型接口<a href=\"post/post-1#对象类型接口\"></a></h4><figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 混合接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Lib &#123;</span><br><span class=\"line\">    (): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    version: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    doSomething(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// function getLib() &#123; 可以创建多个 lib 实例的方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> lib: Lib = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125; <span class=\"keyword\">as</span> Lib; <span class=\"comment\">// 使用类型断言</span></span><br><span class=\"line\">lib.version = <span class=\"string\">'1.0'</span>;</span><br><span class=\"line\">lib.doSomething = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//   return lib;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"类类型接口\">类类型接口<a href=\"post/post-1#类类型接口\"></a></h4><p>接口声明的成员属性和方法，在类的实现中都必须要有。<br>接口只能约束类的公有成员，也不能约束类的构造函数<br>接口可以像类一样继承</p>\n<p>// TODO 这部分类的实现与接口直接的关系自己还有点混乱需要重新整理</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Human &#123;</span><br><span class=\"line\">    name: strng;</span><br><span class=\"line\">    eat(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Asian <span class=\"keyword\">implements</span> Human &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Man <span class=\"keyword\">extends</span> Human &#123;</span><br><span class=\"line\">    run(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Child <span class=\"keyword\">extends</span> Human &#123;</span><br><span class=\"line\">    cry(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 可以合并两个接口的约束</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Boy <span class=\"keyword\">extends</span> Man, Child &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> boy: Boy = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">''</span>,</span><br><span class=\"line\">    run() &#123;&#125;,</span><br><span class=\"line\">    cry() &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>// TODO 未待完续</p>\n","next":{"title":"关于 typescript 学习手记（一）基本类型","link":"post/ts"},"plink":"https://yanoo1497.github.io/post/post-1/"}