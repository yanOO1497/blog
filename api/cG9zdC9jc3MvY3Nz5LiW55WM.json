{"title":"《css世界》书摘","date":"2019-03-30T05:15:01.627Z","link":"post/css/css世界","tags":["css"],"updated":"2019-08-04T09:33:11.764Z","content":"<h1 id=\"《css世界》书摘\">《css世界》书摘<a href=\"post/css/css世界#《css世界》书摘\"></a></h1><ol>\n<li>选择器的种类：基础选择器 + 关系型选择器</li>\n<li>标签的分类：</li>\n</ol>\n<ul>\n<li>块级元素和内联元素 （！块级元素并不等于display : block,例如 li 元素的 display 值为 list-item ，table 元素则为 table）;</li>\n<li></li>\n</ul>\n<ol start=\"3\">\n<li>IE 浏览器无法支持 list-item 的原因：无法生成外部防止圆点标记的盒子；</li>\n<li>所有盒子都由两种盒子结构组成，块级盒子（负责结构）内联盒子（负责内容）。内联元素（inline-block）即为外层内联盒子内层块级盒子。</li>\n<li>width: auto 的作用</li>\n</ol>\n<ul>\n<li>充分利用可用空间；</li>\n<li>收缩与包裹；</li>\n<li>收缩到最小；</li>\n<li>超出容器限制；（只要不指定宽度又没有设置 whit-space:nowrap 是不会超出容器边界的）<blockquote>\n<p>要充分利用浏览器原生流特性的好处</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"6\">\n<li>button 按钮和 input 按钮的区别：</li>\n</ol>\n<ul>\n<li>button 按钮标签文字会自动换行，input 标签按钮因为有 white-space:pre 不会自动换行，改值为 normal 则可以换行； </li>\n</ul>\n<ol start=\"7\">\n<li>需求：模块内的文字是动态的，要求文字少的时候居中显示，文字超出一行时居左显示 。</li>\n</ol>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123; text-align: center&#125;;// 外部容器盒子</span><br><span class=\"line\">.content &#123; display: inline-block; // 内部文本盒子 text-align:left&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ol start=\"8\">\n<li>width 是作用在 content box 上面的（或许是因为 width 是CSS2.1 制定的，而 CSS2.1 是面向内容设计的），而浏览器对于 content box 的尺寸定义不一致（是否包括 padding、border不一样，因而会有宽度计算问题），而 box-sizing 正是调整内部 width 作用细节而定义的方式，box-sizing:border-box,即为IE盒子的计算方式，将 width 作用在 border-box上面。</li>\n<li>外部尺寸：</li>\n</ol>\n<ul>\n<li>正常流宽度（表现为“外部尺寸”的块级元素一旦设置了宽度，流动性就丢失了）</li>\n<li>格式化宽度（仅出现在绝对定位模型中，默认情况下，绝对定位的宽度表现是“包裹”性的，然而非替换元素，当top/left或 right/bottom 等对立方位的属性值提示存在时，元素宽度表示为“格式化宽度”，宽度大小相对于最近的具有定位特性的祖先元素计算，具有完全的流体性）</li>\n</ul>\n<ol start=\"10\">\n<li>内部尺寸与流体特性</li>\n</ol>\n<ul>\n<li>包裹性（包裹+自适应）。</li>\n<li>首选最小宽度。<br>即便外部设置width:0;内部的图片文字宽度也会有一个最小宽度而不是0;</li>\n<li>最大宽度<br>，等于设置white-psace设置no-wrap后的宽度。</li>\n</ul>\n<ol start=\"11\">\n<li>box-sizing 的设计初衷</li>\n</ol>\n<p><strong>解决非替换元素的自适应宽度问题</strong></p>\n<ul>\n<li>对于非替换元素，display:block会具有流动性，宽度由外部决定。</li>\n<li>非替换元素宽度不受display/外部容器影响，因而通过给替换元素设置display:block是无法实现宽度100%自适应的。因而需要显式指定width<blockquote>\n<p>因而，在重置代码里加上 input, textarea, img, video, object { box-sizing:border-box; }是合理且必要的<br>有效</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"12\">\n<li>为何 height:100%无效，而宽度100%</li>\n</ol>\n<ul>\n<li><p>当未指定高度值时默认值为auto<br>而单位百分比则是：将高度定义为相对包含块高度的百分比。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;auto&apos;*100%=NaN</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>width 默认虽然也是auto，但是只却是有真实值计算而来的</p>\n</li>\n</ul>\n<ol start=\"13\">\n<li>非绝对定位元素的宽高百分比是对应 content box 的，绝对定位元素的则是对应 padding box的；</li>\n<li>max-<em>系列的初始值为none, min-</em>系列的则为auto,理解此点对于动画过渡方面的区别挺大的。<br>与height\\width等的覆盖规则：</li>\n</ol>\n<ul>\n<li>max-width 将会覆盖width,即便是设置了!important的width;</li>\n<li>在冲突时，min-width 将会覆盖 max-width；</li>\n</ul>\n<ol start=\"15\">\n<li>根据是否具有可替换内容，元素可分为可替换元素和非替换元素。</li>\n</ol>\n<ul>\n<li>替换元素：通过修改某个属性值所呈现的内容就会被改变的元素。</li>\n</ul>\n<p><strong>特性：</strong></p>\n<p>(1)内容元素的外观不受页面的css影响（本质上是web component,内部样式为shadow dom因而不受外界控制）；</p>\n<p>(2)有自己的尺寸，通常默认为300*150;</p>\n<p>(3)所有替换元素都是内联元素，但是默认的display值却是不一样的。<br>(4)替换元素的尺寸规则：<br>css尺寸&gt;html尺寸&gt;固有尺寸（例如img图片自身的大小）&gt;默认尺寸（在没指定内容时）</p>\n<p>一个为首屏图片不影响布局处理的css：<br>img {visibility:hiden}<br>img[src] {visibility:visible}<br>没有src不会产生任何请求</p>\n<p><strong>其他知识点：</strong></p>\n<p>(5)firefox的::before微元素的content值设置会被无视，after则有效；</p>\n<p>(6)p51一个基于伪元素的图片生成技术，技术支持理论：<br>去掉src属性，很多替换元素就变成替换元素</p>\n<ul>\n<li>核心代码</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img::after &#123;</span><br><span class=\"line\">    /* 生成alt信息 */</span><br><span class=\"line\">    content: attr(alt);</span><br><span class=\"line\">    /* 尺寸和定位 */</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    background-color: rgba(0, 0, 0, .5);</span><br><span class=\"line\">    transform: translateY(100%);</span><br><span class=\"line\">    /* 过渡动画效果 */</span><br><span class=\"line\">    transition: transform .2s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">img:hover::after &#123;</span><br><span class=\"line\">    /* alt 信息展示 */</span><br><span class=\"line\">    transform: translateY(0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>原理：图片未加载时，没有src此时为非替换元素，hover后显示alt提示文本；加载后为替换元素，:after,:before特性失效</p>\n<p>(7)在chrome下，所有元素都支持content属性，而其他浏览器仅在:before等伪元素内有效。利用content属性，可以让普通标签变成替换元素。<br>应用举例：常见网站的标题用h1标签，但通常都使用特殊处理的字体图片而非直接使用字体，为了保证seo的友好，通常会在标签内写上文字内容，然后设置text-indent:-999px;来隐藏文字。利用content的新方法：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h1 &#123;</span><br><span class=\"line\">    content:url(logo.svg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>（8）利用content生成文字的坏处：无法被屏幕阅读设备读取，无法被搜索引擎抓取，对可访问性和seo都不太友好。</p>\n<ul>\n<li>非替换元素：</li>\n</ul>\n<ol start=\"16\">\n<li>关于content内容生成技术</li>\n</ol>\n<ul>\n<li>content辅助元素生成：利用其他css代码来生成辅助元素，或实现图形效果，或实现特定布局，会使HTML代码更加干净简洁。</li>\n<li>content字符内容生成：应用例子（iconfont），可利用该特性实现ie6-ie9的动态加载动画效果</li>\n<li>content图片生成：通过给content赋予url(图片地址)来实现。现实中很少使用该方式，因为这样生成的图片尺寸不好控制</li>\n<li>attr属性值内容生成（使用方式类似函数，指定的属性值名称不要加引号）</li>\n<li>content计数器：应用实例（购物车、书籍目录）</li>\n</ul>\n<ol start=\"17\">\n<li><p>padding元素，利用其特性可轻易实现 登录注册中间的“管道符”；<br>实例代码：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = a:before &#123;</span><br><span class=\"line\">    content:&quot;&quot;;</span><br><span class=\"line\">    font-size:0;</span><br><span class=\"line\">    padding:10px 3px 1px;</span><br><span class=\"line\">    margin-left:6px;</span><br><span class=\"line\">    border-left；1px solid gray; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>内联元素设置padding不会加入行盒高度的计算，也就是不影响布局，但是会实际会发生渲染，可利用此特性给一些内联点击元素扩大点击区域；对于内联元素，padding是会断行的，宽高完全受font-size大小控制、</p>\n</li>\n<li><p>margin\\padding百分比值无论是哪个方向的都是基于宽度计算的</p>\n</li>\n<li><p>由于button元素的内置padding在多浏览器下很难控制，因而通常都使用a模拟按钮居多。</p>\n</li>\n<li><p>可以利用padding来实现三道杠和双层圆点。</p>\n</li>\n<li><p>关于内部尺寸与margin\\padding的关系：两者都可以改变元素的可视尺寸，对于padding，元素设置了width或者保持其包裹性时，会改变元素尺寸，而margin,只有在元素是“充分利用可用空间”状态（流布局，宽度自适应），才可以改变元素尺寸。可利用此特性，使用负值margin来消除最后一个子元素margin-left。</p>\n</li>\n<li><p>对于普通的块状元素，在默认的水平流下，margin只能改变左右方向的内部尺寸。但如果使用writing-mode改变流向为垂直流，则水平方向内部尺寸无法改变，垂直方向可以改变。</p>\n</li>\n<li><p>如果容器可以滚动，在IE和FireBox下是会忽略padding-bottom值的。因而只能使用子元素的margin-bottom来实现滚动容器的底部留白。</p>\n</li>\n<li><p>使用margin负值可以实现等高布局，但无法满足子元素需要需要定位在父容器之外的布局。</p>\n</li>\n<li><p>margin合并只发生在：（1）垂直方向；（2）块级元素（不包括浮动和绝对定位元素）</p>\n</li>\n<li><p>margin合并的三种场景：（1）相邻兄弟元素的上下margin；（2）父级和第一个/最后一个子元素。阻止该情况margin合并的方式：<br>对于margin-top的处理方法（满足一个即可）</p>\n</li>\n</ol>\n<ul>\n<li>父元素设置为块状格式化上下文元素；</li>\n<li>父元素设置Border-top;</li>\n<li>父元素设置padding-top;</li>\n<li>父元素和第一个子元素之间添加内联元素进行分隔；<br>对于margin-bottom的处理方法（满足一个）</li>\n<li>父元素设置为块状格式化上下文元素；</li>\n<li>父元素设置Border-bottom;</li>\n<li>父元素设置padding-bottom;</li>\n<li>父元素设置height\\min-height\\或max-height；<br>(3)空块级元素的margin合并</li>\n</ul>\n<p>28. </p>\n","prev":{"title":"无重复字符的最长子串","link":"post/leetcode/Longest Substring Without Repeating Characters"},"next":{"title":"chokidar API","link":"post/node/npm-package/chokidar"},"plink":"https://github.com/yanOO1497/post/css/css世界/","toc":[{"title":"《css世界》书摘","id":"《css世界》书摘","index":"1"}]}