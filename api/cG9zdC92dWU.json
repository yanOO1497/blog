{"title":"Vue 踩坑记录与经验分享记录","date":"2021-02-16T06:32:22.000Z","link":"post/vue","tags":["Vue"],"categories":["Vue"],"updated":"2021-10-10T10:29:55.019Z","content":"<blockquote>\n<p>记录在工作中使用 Vue 过程中遇到的坑以及一些收获</p>\n</blockquote>\n<p>参考自 <a href=\"https://ustbhuangyi.github.io/Vue-analysis/v2/prepare/\" target=\"_blank\" rel=\"noopener\">Vue 源码解析</a></p>\n<h2 id=\"一些踩过的坑\">一些踩过的坑<a href=\"post/vue#一些踩过的坑\"></a></h2><ol>\n<li><p>使用 :style 会引起 dom 更新，在遇到一些需要严格控制界面刷新次数提高性能的场景需要尤其注意；</p>\n</li>\n<li><p>[Vue warn]: $attrs is readonly，[Vue warn]: $listeners is readonly</p>\n <!-- 工作中制作的一个页面有需要加载其他页面并且把身上挂载的数据传递过去，相当于父子关系，这里称作父页面和子页面。父页面 new 了一个 Vue，子页面也 new 了一个 Vue，两者分属于不同的项目仓库。 -->\n\n<p> 在同一个面板共享 Vue 组件时，需要注意需要使用同一个 Vue 源；</p>\n</li>\n<li><p>工作中制作的一个页面有需要加载其他页面并且把身上挂载的数据传递过去，相当于父子关系，这里称作父页面和子页面。父页面 new 了一个 Vue，子页面也 new 了一个 Vue，两者分属于不同的项目仓库。子页面需要使用父页面传递过来的数据来初始化，如果这时候传递给子页面 Vue 初始化的数据是直接从父页面 Vue 上获取来的，这个数据监听不会再次处理一遍，修改这部分数据，只会影响父页面不会影响子页面的 View。数据需要深度拷贝才能被其他 Vue 组件使用。</p>\n</li>\n<li><p>计算属性里如果使用了非 Vue 监听数据作为判断返回不同的结果需要额外注意，可能会影响到 Vue 初始化计算属性依赖的收集。Vue 源码上对于这个计算属性的依赖收集也很巧妙，可参阅 <a href=\"https://github.com/Leo-lin214/about-Vue/blob/master/docs/%E3%80%90%20Vue%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%E3%80%91%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%20Computed.md\" target=\"_blank\" rel=\"noopener\">https://github.com/Leo-lin214/about-Vue/blob/master/docs/%E3%80%90%20Vue%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%E3%80%91%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%20Computed.md</a></p>\n<p> 举个例子：</p>\n <figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isReady = <span class=\"literal\">false</span>;</span><br><span class=\"line\">computeSelectPath() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.selectPath || !isReady) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.selectUuid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'default'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p> 当前情况下，实际上我们希望这个计算属性能在 <code>selectPath，selectUuid</code> 变化时都重新计算。但是由于计算属性初始化是在执行一遍代码后收集依赖项的，由于代码仅执行到 isReady 这一句就返回了，只收集到了 <code>selectPath</code> 这个依赖项，导致后续 <code>selectUuid</code> 发生变化也不会更新数值一直使用缓存的空字符串。</p>\n</li>\n<li><p>vue 生命周期钩子函数中的异步请求，会放在事件队列里面，不影响静态页面的加载。</p>\n</li>\n</ol>\n<h2 id=\"Vue-源码编程思想上的借鉴\">Vue 源码编程思想上的借鉴<a href=\"post/vue#Vue-源码编程思想上的借鉴\"></a></h2><ol>\n<li><p>尽量把不同的功能逻辑拆成一些单独的函数执行，让主线逻辑一目了然。</p>\n</li>\n<li><p>Vue 在代码实现上是一个用 Function 实现的类，比起用 Es6 的 Class 来说，它的好处是可以在代码后续去定义许多扩展函数，并把 Vue 当参数传入来给 Vue 的 prototype 上扩展一些方法。Vue 按功能把这些扩展分散到多个模块中去实现，而不是在一个模块里实现所有，这种方式是用 Class 难以实现的。这么做会非常方便代码的维护和管理。</p>\n</li>\n<li><p>虽然 with 在 ECMAScript 5 的严格模式中是被禁用的，但是在某些合适位置的使用却能达到意外的效果。 Vue.js 编译生成的代码需要用 with 包一层，对于模板内部用到了一些复杂表达式，利用 with 的特性动去指定的对象中查找即可，完全不用做多余的转换，也不用引入这些 AST 解析库了。<br> 实际应用举例：<br> <img src=\"https://user-images.githubusercontent.com/27424848/136691875-2ac29c51-3f54-40db-9a99-e077b52231cb.png\" alt=\"image\"><br> 结合 new Function 可以比较安全的执行外部传进来的代码片段。</p>\n</li>\n</ol>\n<p>… 未待完续</p>\n<p>参考资料:</p>\n<p><a href=\"https://github.com/Leo-lin214/about-Vue\" target=\"_blank\" rel=\"noopener\">Vue 源码分析</a><br><a href=\"https://ustbhuangyi.github.io/vue-analysis/\" target=\"_blank\" rel=\"noopener\">Vue.js 技术揭秘</a></p>\n","prev":{"title":"Canvas 开发经验记录","link":"post/2021-canvas-tips"},"next":{"title":"module.exports 与 exports 的区别（极简）","link":"post/20-08-16-exports"},"plink":"https://yanoo1497.github.io/post/vue/","toc":[{"title":"一些踩过的坑","id":"一些踩过的坑","index":"1"},{"title":"Vue 源码编程思想上的借鉴","id":"Vue-源码编程思想上的借鉴","index":"2"}]}