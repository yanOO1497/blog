{"title":"js性能优化注意事项","date":"2019-10-16T06:32:22.000Z","link":"post/js1","tags":["javascript"],"categories":["javascript"],"updated":"2021-06-12T10:38:30.372Z","content":"<h3 id=\"原生js部分\">原生js部分<a href=\"post/js1#原生js部分\"></a></h3><p>参考文章</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/liyunhua/p/4529086.html\" target=\"_blank\" rel=\"noopener\">js性能优化的小知识</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008273435\" target=\"_blank\" rel=\"noopener\">javascript性能优化技巧</a></li>\n<li><a href=\"http://www.jb51.net/article/75186.htm\" target=\"_blank\" rel=\"noopener\">JavaScript性能优化之小知识总结</a></li>\n</ul>\n<h4 id=\"DOM编程\">DOM编程<a href=\"post/js1#DOM编程\"></a></h4><h5 id=\"建议将对象进行缓存处理，特别是DOM访问是比较消耗资源的\">建议将对象进行缓存处理，特别是DOM访问是比较消耗资源的<a href=\"post/js1#建议将对象进行缓存处理，特别是DOM访问是比较消耗资源的\"></a></h5><h5 id=\"使用DocumentFragment优化多次append\">使用DocumentFragment优化多次append<a href=\"post/js1#使用DocumentFragment优化多次append\"></a></h5><p>一旦需要更新DOM,请考虑使用文档碎片来构建DOM结构，然后再将其添加到现存的文档中。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\">      el.innerHTML = i;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.body.appendChild(el);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//可以替换为：</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> frag = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\">      el.innerHTML = i;</span><br><span class=\"line\">      frag.appendChild(el);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(frag);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"使用一次innerHTML赋值代替构建dom元素\">使用一次innerHTML赋值代替构建dom元素<a href=\"post/js1#使用一次innerHTML赋值代替构建dom元素\"></a></h5><p>对于大的DOM更改，使用innerHTML要比使用标准的DOM方法创建同样的DOM结构快得多。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> frag = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\">  el.innerHTML = i;</span><br><span class=\"line\">  frag.appendChild(el);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(frag);</span><br><span class=\"line\"><span class=\"comment\">//可以替换为：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> html = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">  html.push(<span class=\"string\">'&lt;p&gt;'</span> + i + <span class=\"string\">'&lt;/p&gt;'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.innerHTML = html.join(<span class=\"string\">''</span>);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"通过模板元素clone，替代createElement\">通过模板元素clone，替代createElement<a href=\"post/js1#通过模板元素clone，替代createElement\"></a></h5><p>很多人喜欢在JavaScript中使用document.write来给页面生成内容。事实上这样的效率较低，如果需要直接插入HTML，可以找一个容器元素，比如指定一个div或者span，并设置他们的innerHTML来将自己的HTML代码插入到页面中。通常我们可能会使用字符串直接写HTML来创建节点，其实这样做，1无法保证代码的有效性2字符串操作效率低，所以应该是用document.createElement()方法，而如果文档中存在现成的样板节点，应该是用cloneNode()方法，因为使用createElement()方法之后，你需要设置多次元素的属性，使用cloneNode()则可以减少属性的设置次数——同样如果需要创建很多元素，应该先准备一个样板节点</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> frag = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\">      el.innerHTML = i;</span><br><span class=\"line\">      frag.appendChild(el);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(frag);</span><br><span class=\"line\">    <span class=\"comment\">//替换为：</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> frag = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pEl = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'p'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> el = pEl.cloneNode(<span class=\"literal\">false</span>);</span><br><span class=\"line\">      el.innerHTML = i;</span><br><span class=\"line\">      frag.appendChild(el);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(frag);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"使用firstChild和nextSibling代替childNodes遍历dom元素\">使用firstChild和nextSibling代替childNodes遍历dom元素<a href=\"post/js1#使用firstChild和nextSibling代替childNodes遍历dom元素\"></a></h5><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nodes = element.childNodes;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = nodes.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> node = nodes[i];</span><br><span class=\"line\">      <span class=\"comment\">//……</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//可以替换为：</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = element.firstChild;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//……</span></span><br><span class=\"line\">      node = node.nextSibling;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"删除DOM节点\">删除DOM节点<a href=\"post/js1#删除DOM节点\"></a></h5><p>删除dom节点之前,一定要删除注册在该节点上的事件,不管是用observe方式还是用attachEvent方式注册的事件,否则将会产生无法回收的内存。另外，在removeChild和innerHTML=’’二者之间,尽量选择后者. 因为在sIEve(内存泄露监测工具)中监测的结果是用removeChild无法有效地释放dom节点<br>使用事件代理<br>任何可以冒泡的事件都不仅仅可以在事件目标上进行处理，目标的任何祖先节点上也能处理，使用这个知识就可以将事件处理程序附加到更高的地方负责多个目标的事件处理，同样，对于内容动态增加并且子节点都需要相同的事件处理函数的情况，可以把事件注册提到父节点上，这样就不需要为每个子节点注册事件监听了。另外，现有的js库都采用observe方式来创建事件监听,其实现上隔离了dom对象和事件处理函数之间的循环引用,所以应该尽量采用这种方式来创建事件监听<br>重复使用的调用结果，事先保存到局部变量</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//避免多次取值的调用开销</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> h1 = element1.clientHeight + num1;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> h2 = element1.clientHeight + num2;</span><br><span class=\"line\"> <span class=\"comment\">//可以替换为：</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> eleHeight = element1.clientHeight;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> h1 = eleHeight + num1;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> h2 = eleHeight + num2;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>注意NodeList</strong></p>\n<p>最小化访问NodeList的次数可以极大的改进脚本的性能</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> images = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'img'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = images.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编写JavaScript的时候一定要知道何时返回NodeList对象，这样可以最小化对它们的访问<br>进行了对getElementsByTagName()的调用<br>获取了元素的childNodes属性<br>获取了元素的attributes属性<br>访问了特殊的集合，如document.forms、document.images等等<br>要了解了当使用NodeList对象时，合理使用会极大的提升代码执行速度</p>\n<h4 id=\"算法和流程控制\">算法和流程控制<a href=\"post/js1#算法和流程控制\"></a></h4><h5 id=\"建议不要在函数内进行过深的嵌套判断\">建议不要在函数内进行过深的嵌套判断<a href=\"post/js1#建议不要在函数内进行过深的嵌套判断\"></a></h5><h5 id=\"尽量不要用for-in-循环去访问数组，建议用-for-循环进行循环\">尽量不要用for-in 循环去访问数组，建议用 for 循环进行循环<a href=\"post/js1#尽量不要用for-in-循环去访问数组，建议用-for-循环进行循环\"></a></h5><h5 id=\"优化循环\">优化循环<a href=\"post/js1#优化循环\"></a></h5><p>可以使用下面几种方式来优化循环</p>\n<h6 id=\"倒序循环\">倒序循环<a href=\"post/js1#倒序循环\"></a></h6><p>大多数循环使用一个从0开始、增加到某个特定值的迭代器，在很多情况下，从最大值开始，在循环中不断减值的迭代器更加高效<br>参考文章：<a href=\"http://www.jb51.net/article/30947.htm\" target=\"_blank\" rel=\"noopener\">javascript for循环从入门到偏门(效率优化+奇特用法)</a><br>把减法操作放到控制条件中，例如：i–，这样只是比较“它是true吗？”速度更快。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = arr.length; </span><br><span class=\"line\"><span class=\"keyword\">for</span>(;i&gt;<span class=\"number\">0</span>;i--)&#123; </span><br><span class=\"line\">    <span class=\"comment\">//alert(i); </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h6 id=\"简化终止条件\">简化终止条件<a href=\"post/js1#简化终止条件\"></a></h6><p>由于每次循环过程都会计算终止条件，所以必须保证它尽可能快，也就是说避免属性查找或者其它的操作，最好是将循环控制量保存到局部变量中，也就是说对数组或列表对象的遍历时，提前将length保存到局部变量中，避免在循环的每一步重复取值。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'p'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//……</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//替换为：</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'p'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = list.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//……</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h6 id=\"简化循环体\">简化循环体<a href=\"post/js1#简化循环体\"></a></h6><p>循环体是执行最多的，所以要确保其被最大限度的优化</p>\n<h6 id=\"使用后测试循环\">使用后测试循环<a href=\"post/js1#使用后测试循环\"></a></h6><p>在JavaScript中，我们可以使用for(;;),while(),for(in)三种循环，事实上，这三种循环中for(in)的效率极差，因为他需要查询散列键，只要可以，就应该尽量少用。for(;;)和while循环，while循环的效率要优于for(;;)，可能是因为for(;;)结构的问题，需要经常跳转回去。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">  sum += arr[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以考虑替换为：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>, l = arr.length;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (l--) &#123;</span><br><span class=\"line\">  sum += arr[l];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>最常用的for循环和while循环都是前测试循环，而如do-while这种后测试循环，可以避免最初终止条件的计算，因此运行更快。</p>\n<h6 id=\"展开循环\">展开循环<a href=\"post/js1#展开循环\"></a></h6><p>当循环次数是确定的，消除循环并使用多次函数调用往往会更快。</p>\n<h6 id=\"避免双重解释\">避免双重解释<a href=\"post/js1#避免双重解释\"></a></h6><p>如果要提高代码性能，尽可能避免出现需要按照JavaScript解释的字符串，也就是</p>\n<p>####### 尽量少使用eval函数<br>使用eval相当于在运行时再次调用解释引擎对内容进行运行，需要消耗大量时间，而且使用Eval带来的安全性问题也是不容忽视的。<br>不要使用Function构造器<br>不要给setTimeout或者setInterval传递字符串参数</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    setTimeout(<span class=\"string\">'num++'</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">//可以替换为：</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addNum</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      num++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setTimeout(addNum, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>缩短否定检测</strong></p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (oTest != <span class=\"string\">'#ff0000'</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (oTest != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (oTest != <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//虽然这些都正确，但用逻辑非操作符来操作也有同样的效果：</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!oTest) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"条件分支\">条件分支<a href=\"post/js1#条件分支\"></a></h5><p>将条件分支，按可能性顺序从高到低排列：可以减少解释器对条件的探测次数<br>在同一条件子的多（&gt;2）条件分支时，使用switch优于if：switch分支选择的效率高于if，在IE下尤为明显。4分支的测试，IE下switch的执行时间约为if的一半。<br>使用三目运算符替代条件分支</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">      num = a;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      num = b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//可以替换为：</span></span><br><span class=\"line\">    num = a &gt; b ? a : b;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"数据存取\">数据存取<a href=\"post/js1#数据存取\"></a></h4><h5 id=\"使用直接量\">使用直接量<a href=\"post/js1#使用直接量\"></a></h5><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aTest = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(); <span class=\"comment\">//替换为</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> aTest = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> aTest = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>; <span class=\"comment\">//替换为</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> aTest = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(); <span class=\"comment\">//替换为</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/../</span>;</span><br><span class=\"line\">    <span class=\"comment\">//如果要创建具有一些特性的一般对象，也可以使用字面量，如下：</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> oFruit = <span class=\"keyword\">new</span> O;</span><br><span class=\"line\">    oFruit.color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">    oFruit.name = <span class=\"string\">\"apple\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//前面的代码可用对象字面量来改写成这样：</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> oFruit = &#123; <span class=\"attr\">color</span>: <span class=\"string\">\"red\"</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"apple\"</span> &#125;;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"字符串连接\">字符串连接<a href=\"post/js1#字符串连接\"></a></h4><p>如果要连接多个字符串，应该少使用+=，如<br>s+=a;s+=b;s+=c;<br>应该写成s+=a + b + c；<br>而如果是收集字符串，比如多次对同一个字符串进行+=操作的话，最好使用一个缓存，使用JavaScript数组来收集，最后使用join方法连接起来</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buf = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(vari = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    buf.push(i.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> all = buf.join(<span class=\"string\">\"\"</span>);</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"避免with语句\">避免with语句<a href=\"post/js1#避免with语句\"></a></h4><p>和函数类似 ，with语句会创建自己的作用域，因此会增加其中执行的代码的作用域链的长度，由于额外的作用域链的查找，在with语句中执行的代码肯定会比外面执行的代码要慢，在能不使用with语句的时候尽量不要使用with语句。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span>(a.b.c.d) &#123;</span><br><span class=\"line\">    property1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    property2 = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以替换为：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = a.b.c.d;</span><br><span class=\"line\">obj.property1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj.property2 = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"数字转换成字符串\">数字转换成字符串<a href=\"post/js1#数字转换成字符串\"></a></h5><p>一般最好用”” +1来将数字转换成字符串，虽然看起来比较丑一点，但事实上这个效率是最高的，性能上来说：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(“” +) &gt; <span class=\"built_in\">String</span>() &gt; .toString() &gt; newString()</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"浮点数转换成整型\">浮点数转换成整型<a href=\"post/js1#浮点数转换成整型\"></a></h5><p>很多人喜欢使用parseInt()，其实parseInt()是用于将字符串转换成数字，而不是浮点数和整型之间的转换，我们应该使用Math.floor()或者Math.round()</p>\n<h5 id=\"各种类型转换\">各种类型转换<a href=\"post/js1#各种类型转换\"></a></h5><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myVar = <span class=\"string\">\"3.14159\"</span>,</span><br><span class=\"line\">    str = <span class=\"string\">\"\"</span> + myVar, <span class=\"comment\">// to string </span></span><br><span class=\"line\">    i_int = ~ ~myVar, <span class=\"comment\">// to integer </span></span><br><span class=\"line\">    f_float = <span class=\"number\">1</span> * myVar, <span class=\"comment\">// to float </span></span><br><span class=\"line\">    b_bool = !!myVar, <span class=\"comment\">/* to boolean - any string with length </span></span><br><span class=\"line\"><span class=\"comment\">                and any number except 0 are true */</span></span><br><span class=\"line\">    array = [myVar]; <span class=\"comment\">// to array</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果定义了toString()方法来进行类型转换的话，推荐显式调用toString()，因为内部的操作在尝试所有可能性之后，会尝试对象的toString()方法尝试能否转化为String，所以直接调用这个方法效率会更高</p>\n<h5 id=\"多个类型声明\">多个类型声明<a href=\"post/js1#多个类型声明\"></a></h5><p>在JavaScript中所有变量都可以使用单个var语句来声明，这样就是组合在一起的语句，以减少整个脚本的执行时间，就如上面代码一样，上面代码格式也挺规范，让人一看就明了。</p>\n<h5 id=\"使用常量\">使用常量<a href=\"post/js1#使用常量\"></a></h5><p>重复值:任何在多处用到的值都应该抽取为一个常量<br>用户界面字符串:任何用于显示给用户的字符串，都应该抽取出来以方便国际化<br>URLs:在Web应用中，资源位置很容易变更，所以推荐用一个公共地方存放所有的URL<br>任意可能会更改的值:每当你用到字面量值的时候，你都要问一下自己这个值在未来是不是会变化，如果答案是“是”，那么这个值就应该被提取出来作为一个常量。<br>避免与null进行比较<br>由于JavaScript是弱类型的，所以它不会做任何的自动类型检查，所以如果看到与null进行比较的代码，尝试使用以下技术替换<br>如果值应为一个引用类型，使用instanceof操作符检查其构造函数<br>如果值应为一个基本类型，作用typeof检查其类型<br>如果是希望对象包含某个特定的方法名，则使用typeof操作符确保指定名字的方法存在于对象上</p>\n<h5 id=\"避免全局量\">避免全局量<a href=\"post/js1#避免全局量\"></a></h5><p>全局变量应该全部字母大写，各单词之间用_下划线来连接。尽可能避免全局变量和函数, 尽量减少全局变量的使用，因为在一个页面中包含的所有JavaScript都在同一个域中运行。所以如果你的代码中声明了全局变量或者全局函数的话，后面的代码中载入的脚本文件中的同名变量和函数会覆盖掉（overwrite）你的。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//糟糕的全局变量和全局函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> current = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">verify</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解决办法有很多，Christian Heilmann建议的方法是：</span></span><br><span class=\"line\"><span class=\"comment\">//如果变量和函数不需要在“外面”引用，那么就可以使用一个没有名字的方法将他们全都包起来。</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> current = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">verify</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">//如果变量和函数需要在“外面”引用，需要把你的变量和函数放在一个“命名空间”中</span></span><br><span class=\"line\"><span class=\"comment\">//我们这里用一个function做命名空间而不是一个var，因为在前者中声明function更简单，而且能保护隐私数据</span></span><br><span class=\"line\">myNameSpace = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> current = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">verify</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//所有需要在命名空间外调用的函数和属性都要写在return里面</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    init: init,</span><br><span class=\"line\">    <span class=\"comment\">//甚至你可以为函数和属性命名一个别名</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span>: change</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">```js</span><br><span class=\"line\">##### 避免全局查找</span><br><span class=\"line\">将全局变量存储到局部变量中：因为全局变量总是存在于执行环境作用域链的最末端，所以，访问全局变量是最慢的，访问局部变量是最快的。尤其是对于未优化过的JavaScript引擎。</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">function search() &#123;<span class=\"comment\">//当我要使用当前页面地址和主机域名</span></span><br><span class=\"line\">    alert(<span class=\"built_in\">window</span>.location.href + <span class=\"built_in\">window</span>.location.host);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最好的方式是如下这样 先用一个简单变量保存起来</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> location = <span class=\"built_in\">window</span>.location;</span><br><span class=\"line\">    alert(location.href + location.host);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"尊重对象的所有权\">尊重对象的所有权<a href=\"post/js1#尊重对象的所有权\"></a></h5><p>因为JavaScript可以在任何时候修改任意对象，这样就可以以不可预计的方式覆写默认的行为，所以如果你不负责维护某个对象，它的对象或者它的方法，那么你就不要对它进行修改，具体一点就是说：<br>不要为实例或原型添加属性<br>不要为实例或者原型添加方法<br>不要重定义已经存在的方法<br>不要重复定义其它团队成员已经实现的方法，永远不要修改不是由你所有的对象，你可以通过以下方式为对象创建新的功能:<br>创建包含所需功能的新对象，并用它与相关对象进行交互<br>创建自定义类型，继承需要进行修改的类型，然后可以为自定义类型添加额外功能</p>\n<h5 id=\"定时器\">定时器<a href=\"post/js1#定时器\"></a></h5><p>如果针对的是不断运行的代码，不应该使用setTimeout，而应该是用setInterval，因为setTimeout每一次都会初始化一个定时器，而setInterval只会在开始的时候初始化一个定时器</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> timeoutTimes = <span class=\"number\">0</span>;</span><br><span class=\"line\">functiontimeout() &#123;</span><br><span class=\"line\">timeoutTimes++;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(timeoutTimes &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    setTimeout(timeout, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;&#125;</span><br><span class=\"line\">timeout();</span><br><span class=\"line\"><span class=\"comment\">//可以替换为：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intervalTimes = <span class=\"number\">0</span></span><br><span class=\"line\">functioninterval() &#123;</span><br><span class=\"line\">    intervalTimes++;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(intervalTimes &gt;= <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">    clearInterval(interv);</span><br><span class=\"line\">&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> interv = setInterval(interval, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"插入迭代器\">插入迭代器<a href=\"post/js1#插入迭代器\"></a></h4><p>如var name=values[i]; i++;前面两条语句可以写成var name=values[i++]</p>\n<h4 id=\"循环引用\">循环引用<a href=\"post/js1#循环引用\"></a></h4><p>如果循环引用中包含DOM对象或者ActiveX对象，那么就会发生内存泄露。内存泄露的后果是在浏览器关闭前，即使是刷新页面，这部分内存不会被浏览器释放。</p>\n<h5 id=\"简单的循环引用\">简单的循环引用<a href=\"post/js1#简单的循环引用\"></a></h5><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'MyElement'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//…</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">el.func = func;</span><br><span class=\"line\">func.element = el;</span><br></pre></td></tr></table></div></figure>\n\n<p>但是通常不会出现这种情况。通常循环引用发生在为dom元素添加闭包作为expendo的时候。</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'MyElement'</span>);</span><br><span class=\"line\">  el.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//……</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">init();</span><br></pre></td></tr></table></div></figure>\n\n<p>init在执行的时候，当前上下文我们叫做context。这个时候，context引用了el，el引用了function，function引用了context。这时候形成了一个循环引用。</p>\n<h5 id=\"下面2种方法可以解决循环引用\">下面2种方法可以解决循环引用<a href=\"post/js1#下面2种方法可以解决循环引用\"></a></h5><h6 id=\"1-置空dom对象\">1)  置空dom对象<a href=\"post/js1#1-置空dom对象\"></a></h6><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'MyElement'</span>);</span><br><span class=\"line\">      el.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//……</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"comment\">//可以替换为：</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'MyElement'</span>);</span><br><span class=\"line\">      el.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//……</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      el = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    init();</span><br></pre></td></tr></table></div></figure>\n\n<p>将el置空，context中不包含对dom对象的引用，从而打断循环应用。<br>如果我们需要将dom对象返回，可以用如下方法：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'MyElement'</span>);</span><br><span class=\"line\">   el.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//……</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> el;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> init();</span><br><span class=\"line\"> <span class=\"comment\">//可以替换为：</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'MyElement'</span>);</span><br><span class=\"line\">   el.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//……</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> el;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">     el = <span class=\"literal\">null</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> init();</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"2-构造新的context\">2)  构造新的context<a href=\"post/js1#2-构造新的context\"></a></h5><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'MyElement'</span>);</span><br><span class=\"line\">    el.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//……</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  init();</span><br><span class=\"line\">  <span class=\"comment\">//可以替换为：</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">elClickHandler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//……</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'MyElement'</span>);</span><br><span class=\"line\">    el.onclick = elClickHandler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  init();</span><br></pre></td></tr></table></div></figure>\n\n<p> 把function抽到新的context中，这样，function的context就不包含对el的引用，从而打断循环引用。<br>通过javascript创建的dom对象，必须append到页面中<br>IE下，脚本创建的dom对象，如果没有append到页面中，刷新页面，这部分内存是不会回收的！</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> gc = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'GC'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    el.innerHTML = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//下面这句可以注释掉，看看浏览器在任务管理器中，点击按钮然后刷新后的内存变化</span></span><br><span class=\"line\">    gc.appendChild(el);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"释放dom元素占用的内存\">释放dom元素占用的内存<a href=\"post/js1#释放dom元素占用的内存\"></a></h4><p>将dom元素的innerHTML设置为空字符串，可以释放其子元素占用的内存。<br>在rich应用中，用户也许会在一个页面上停留很长时间，可以使用该方法释放积累得越来越多的dom元素使用的内存。</p>\n<h4 id=\"释放javascript对象\">释放javascript对象<a href=\"post/js1#释放javascript对象\"></a></h4><p>在rich应用中，随着实例化对象数量的增加，内存消耗会越来越大。所以应当及时释放对对象的引用，让GC能够回收这些内存控件。</p>\n<ul>\n<li>对象：obj = null</li>\n<li>对象属性：delete obj.myproperty</li>\n<li>数组item：使用数组的splice方法释放数组中不用的item</li>\n</ul>\n<h4 id=\"避免string的隐式装箱\">避免string的隐式装箱<a href=\"post/js1#避免string的隐式装箱\"></a></h4><p>对string的方法调用，比如’xxx’.length，浏览器会进行一个隐式的装箱操作，将字符串先转换成一个String对象。推荐对声明有可能使用String实例方法的字符串时，采用如下写法：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myString = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(‘Hello World<span class=\"string\">');</span></span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"松散耦合\">松散耦合<a href=\"post/js1#松散耦合\"></a></h4><h5 id=\"1、解耦HTML-JavaScript\">1、解耦HTML/JavaScript<a href=\"post/js1#1、解耦HTML-JavaScript\"></a></h5><p>JavaScript和HTML的紧密耦合：直接写在HTML中的JavaScript、使用包含内联代码的<br>HTML和JavaScript的紧密耦合：JavaScript中包含HTML，然后使用innerHTML来插入一段html文本到页面<br>其实应该是保持层次的分离，这样可以很容易的确定错误的来源，所以我们应确保HTML呈现应该尽可能与JavaScript保持分离</p>\n<h5 id=\"2、解耦CSS-JavaScript\">2、解耦CSS/JavaScript<a href=\"post/js1#2、解耦CSS-JavaScript\"></a></h5><p>显示问题的唯一来源应该是CSS，行为问题的唯一来源应该是JavaScript，层次之间保持松散耦合才可以让你的应用程序更加易于维护，所以像以下的代码element.style.color=”red”尽量改为element.className=”edit”，而且不要在css中通过表达式嵌入JavaScript</p>\n<h5 id=\"3、解耦应用程序-事件处理程序\">3、解耦应用程序/事件处理程序<a href=\"post/js1#3、解耦应用程序-事件处理程序\"></a></h5><p>将应用逻辑和事件处理程序相分离：一个事件处理程序应该从事件对象中提取，并将这些信息传送给处理应用逻辑的某个方法中。这样做的好处首先可以让你更容易更改触发特定过程的事件，其次可以在不附加事件的情况下测试代码，使其更易创建单元测试</p>\n<h4 id=\"性能方面的注意事项\">性能方面的注意事项<a href=\"post/js1#性能方面的注意事项\"></a></h4><h5 id=\"1、尽量使用原生方法\">1、尽量使用原生方法<a href=\"post/js1#1、尽量使用原生方法\"></a></h5><h5 id=\"2、switch语句相对if较快\">2、switch语句相对if较快<a href=\"post/js1#2、switch语句相对if较快\"></a></h5><p>通过将case语句按照最可能到最不可能的顺序进行组织</p>\n<h5 id=\"3、位运算较快\">3、位运算较快<a href=\"post/js1#3、位运算较快\"></a></h5><p>当进行数字运算时，位运算操作要比任何布尔运算或者算数运算快</p>\n<h5 id=\"4、巧用-和-amp-amp-布尔运算符\">4、巧用||和&amp;&amp;布尔运算符<a href=\"post/js1#4、巧用-和-amp-amp-布尔运算符\"></a></h5><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventHandler</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!e) e = <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//可以替换为：</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventHandler</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">     e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (myobj) &#123;</span><br><span class=\"line\">     doSomething(myobj);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//可以替换为：</span></span><br><span class=\"line\">   myobj &amp;&amp; doSomething(myobj);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"避免错误应注意的地方\">避免错误应注意的地方<a href=\"post/js1#避免错误应注意的地方\"></a></h5><h6 id=\"1、每条语句末尾须加分号\">1、每条语句末尾须加分号<a href=\"post/js1#1、每条语句末尾须加分号\"></a></h6><p>在if语句中，即使条件表达式只有一条语句也要用{}把它括起来，以免后续如果添加了语句之后造成逻辑错误</p>\n<h6 id=\"2、使用-号时需谨慎\">2、使用+号时需谨慎<a href=\"post/js1#2、使用-号时需谨慎\"></a></h6><p>JavaScript 和其他编程语言不同的是，在 JavaScript 中，’+’除了表示数字值相加，字符串相连接以外，还可以作一元运算符用，把字符串转换为数字。因而如果使用不当，则可能与自增符’++’混淆而引起计算错误</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> valueA = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> valueB = <span class=\"string\">\"10\"</span>;</span><br><span class=\"line\">alert(valueA + valueB);   <span class=\"comment\">//ouput: 2010 </span></span><br><span class=\"line\">alert(valueA + (+valueB)); <span class=\"comment\">//output: 30 </span></span><br><span class=\"line\">alert(valueA + +valueB);  <span class=\"comment\">//output:30 </span></span><br><span class=\"line\">alert(valueA ++ valueB);   <span class=\"comment\">//Compile error</span></span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"3、使用return语句需要注意\">3、使用return语句需要注意<a href=\"post/js1#3、使用return语句需要注意\"></a></h5><p>一条有返回值的return语句不要用()括号来括住返回值，如果返回表达式，则表达式应与return关键字在同一行，以避免压缩时，压缩工具自动加分号而造成返回与开发人员不一致的结果</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> valueA = <span class=\"number\">1</span>;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> valueB = <span class=\"number\">2</span>;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> valueA + valueB;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> valueA = <span class=\"number\">1</span>;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> valueB = <span class=\"number\">2</span>;</span><br><span class=\"line\">     <span class=\"keyword\">return</span></span><br><span class=\"line\">     valueA + valueB;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   alert(F1()); <span class=\"comment\">//output: 3 </span></span><br><span class=\"line\">   alert(F2()); <span class=\"comment\">//ouput: undefined</span></span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"和-的区别\">==和===的区别<a href=\"post/js1#和-的区别\"></a></h5><p>避免在if和while语句的条件部分进行赋值，如if (a = b)，应该写成if (a == b)，但是在比较是否相等的情况下，最好使用全等运行符，也就是使用===和!==操作符会相对于==和!=会好点。==和!=操作符会进行类型强制转换</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> valueA = <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> valueB = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (valueA == valueB) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"Equal\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"Not equal\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//output: \"Equal\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (valueA === valueB) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"Equal\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">\"Not equal\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//output: \"Not equal\"</span></span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"不要使用生偏语法\">不要使用生偏语法<a href=\"post/js1#不要使用生偏语法\"></a></h5><p>不要使用生偏语法，写让人迷惑的代码，虽然计算机能够正确识别并运行，但是晦涩难懂的代码不方便以后维护</p>\n<h5 id=\"函数返回统一类型\">函数返回统一类型<a href=\"post/js1#函数返回统一类型\"></a></h5><p>虽然JavaScript是弱类型的，对于函数来说，前面返回整数型数据，后面返回布尔值在编译和运行都可以正常通过，但为了规范和以后维护时容易理解，应保证函数应返回统一的数据类型</p>\n<h5 id=\"总是检查数据类型\">总是检查数据类型<a href=\"post/js1#总是检查数据类型\"></a></h5><p>要检查你的方法输入的所有数据，一方面是为了安全性，另一方面也是为了可用性。用户随时随地都会输入错误的数据。这不是因为他们蠢，而是因为他们很忙，并且思考的方式跟你不同。用typeof方法来检测你的function接受的输入是否合法</p>\n<h5 id=\"何时用单引号，何时用双引号\">何时用单引号，何时用双引号<a href=\"post/js1#何时用单引号，何时用双引号\"></a></h5><p>虽然在JavaScript当中，双引号和单引号都可以表示字符串, 为了避免混乱，我们建议在HTML中使用双引号，在JavaScript中使用单引号，但为了兼容各个浏览器，也为了解析时不会出错，定义JSON对象时，最好使用双引号</p>\n<h5 id=\"部署\">部署<a href=\"post/js1#部署\"></a></h5><p>用JSLint运行JavaScript验证器来确保没有语法错误或者是代码没有潜在的问<br>部署之前推荐使用压缩工具将JS文件压缩</p>\n<h5 id=\"文件编码统一用UTF-8\">文件编码统一用UTF-8<a href=\"post/js1#文件编码统一用UTF-8\"></a></h5><p>JavaScript 程序应该尽量放在 .js 的文件中，需要调用的时候在 HTML 中以<br>标签前。这样会降低因加载 JavaScript 代码而影响页面中其它组件的加载时间。<br>永远不要忽略代码优化工作，重构是一项从项目开始到结束需要持续的工作，只有不断的优化代码才能让代码的执行效率越来越好</p>\n<h3 id=\"关于JQ部分\">关于JQ部分<a href=\"post/js1#关于JQ部分\"></a></h3><p>这部分很多其实和原生js的优化原理是一样的</p>\n<h4 id=\"1-用数组方式来遍历jQuery-对象集合\">1.用数组方式来遍历jQuery 对象集合<a href=\"post/js1#1-用数组方式来遍历jQuery-对象集合\"></a></h4><p>如果可以使用复杂的选择器直接选中元素，就不要使用循环，去一个个辨认元素。<br>javascript原生循环方法for和while，要比jQuery的.each()方法快，应该优先使用原生方法。</p>\n<p>在性能方面，对于jQuery each方法这种优雅实现是有代价的。有一个办法能够更快地遍历一个jQuery对象。就是通过数组来实现，jQuery对象集合就是一个类数组，具有length和value属性。</p>\n<h4 id=\"2-选择器优化\">2.选择器优化<a href=\"post/js1#2-选择器优化\"></a></h4><p>选择器执行速度：id选择器&gt;class选择器&gt;后代Class选择器&gt;后代选择器&gt;伪类与属性选择器</p>\n<h4 id=\"3-理解子元素和父元素的关系\">3. 理解子元素和父元素的关系<a href=\"post/js1#3-理解子元素和父元素的关系\"></a></h4><p>当父元素已经生成可以链式操作时，<br>最佳选择是$parent.find(‘.child’)。由于$parent往往在前面的操作已经生成，jQuery会进行缓存，所以进一步加快了执行速度。<br>当父元素未生成，为选择元素添加context选择区域会更快。<br>$(‘.child’, $(‘#parent’))</p>\n<blockquote>\n<p>$parent.find(‘.child’)&gt; $(‘.child’, $parent)&gt;$(‘.child’, $(‘#parent’))&gt;$parent.children(‘.child’)&gt;$(‘#parent &gt; .child’)&gt;$(‘#parent .child’)</p>\n</blockquote>\n<h5 id=\"1-‘-child’-parent\">(1) $(‘.child’, $parent)<a href=\"post/js1#1-‘-child’-parent\"></a></h5><p>这条语句的意思是，给定一个DOM对象，然后从中选择一个子元素。jQuery会自动把这条语句转成$.parent.find(‘child’)，这会导致一定的性能损失。它比最快的形式慢了5%-10%。</p>\n<h5 id=\"2-parent-find-‘-child’\">(2) $parent.find(‘.child’)<a href=\"post/js1#2-parent-find-‘-child’\"></a></h5><p>这条是最快的语句。.find()方法会调用浏览器的原生方法（getElementById，getElementByName，getElementByTagName等等），所以速度较快。</p>\n<h5 id=\"3-parent-children-‘-child’\">(3) $parent.children(‘.child’)<a href=\"post/js1#3-parent-children-‘-child’\"></a></h5><p>这条语句在jQuery内部，会使用$.sibling()和javascript的nextSibling()方法，一个个遍历节点。它比最快的形式大约慢50%。</p>\n<h5 id=\"4-‘-parent-gt-child’\">(4) $(‘#parent &gt; .child’)<a href=\"post/js1#4-‘-parent-gt-child’\"></a></h5><p>jQuery内部使用Sizzle引擎，处理各种选择器。Sizzle引擎的选择顺序是从右到左，所以这条语句是先选.child，然后再一个个过滤出父元素#parent，这导致它比最快的形式大约慢70%。</p>\n<h5 id=\"5-‘-parent-child’\">(5) $(‘#parent .child’)<a href=\"post/js1#5-‘-parent-child’\"></a></h5><p>这条语句与上一条是同样的情况。但是，上一条只选择直接的子元素，这一条可以于选择多级子元素，所以它的速度更慢，大概比最快的形式慢了77%。</p>\n<h5 id=\"6-‘-child’-‘-parent’\">(6) $(‘.child’, $(‘#parent’))<a href=\"post/js1#6-‘-child’-‘-parent’\"></a></h5><p>jQuery内部会将这条语句转成$(‘#parent’).find(‘.child’)，比最快的形式慢了23%。</p>\n<h4 id=\"4-有原生方法可以使用的场合，尽量避免使用jQuery\">4.有原生方法可以使用的场合，尽量避免使用jQuery<a href=\"post/js1#4-有原生方法可以使用的场合，尽量避免使用jQuery\"></a></h4><p>this.id的速度比$(this).attr(‘id’)快了20多倍；</p>\n<h4 id=\"5-做好缓存\">5.做好缓存<a href=\"post/js1#5-做好缓存\"></a></h4><p>使用选择器的次数应该越少越好，并且尽可能缓存选中的结果，便于以后反复使用。</p>\n<h4 id=\"6-使用链式写法\">6.使用链式写法<a href=\"post/js1#6-使用链式写法\"></a></h4><p>采用链式写法时，jQuery自动缓存每一步的结果，因此比非链式写法要快。<br>7.事件的委托处理</p>\n<h4 id=\"8-少改动DOM结构\">8.少改动DOM结构<a href=\"post/js1#8-少改动DOM结构\"></a></h4><ol>\n<li>改动DOM结构开销很大，因此不要频繁使用.append()、.insertBefore()和.insetAfter()这样的方法。<br>如果要插入多个元素，就先把它们合并，然后再一次性插入。根据测试，合并插入比不合并插入，快了将近10倍。</li>\n<li>如果你要对一个DOM元素进行大量处理，应该先用.detach()方法，把这个元素从DOM中取出来，处理完毕以后，再重新插回文档。根据测试，使用.detach()方法比不使用时，快了60%。</li>\n<li>如果你要在DOM元素上储存数据，不要写成下面这样：</li>\n</ol>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> elem = $(<span class=\"string\">'#elem'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">elem.data(key,value);</span><br></pre></td></tr></table></div></figure>\n\n<p>而要写成</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var elem = $(&apos;#elem&apos;);</span><br><span class=\"line\">$.data(elem[0],key,value);</span><br></pre></td></tr></table></div></figure>\n\n<p>根据测试， 后一种写法要比前一种写法，快了将近10倍。因为elem.data()方法是定义在jQuery函数的prototype对象上面的， 而$.data()方法是定义jQuery函数上面的，调用的时候不从复杂的jQuery对象上调用，所以速度快得多。（此处可以参阅下面第10点。）</p>\n<ol start=\"4\">\n<li>插入html代码的时候，浏览器原生的innterHTML()方法比jQuery对象的html()更快。</li>\n</ol>\n<h4 id=\"9-选择作用域链最短的方法\">9.选择作用域链最短的方法<a href=\"post/js1#9-选择作用域链最短的方法\"></a></h4><p>Javascript的变量采用链式作用域。读取变量的时候，先在当前作用域寻找该变量，如果找不到，就前往上一层的作用域寻找该变量。因而读取局部变量比读取全局变量快得多。</p>\n","prev":{"title":"几种字符串匹配算法","link":"post/string"},"next":{"title":"周记(2019-10-7 —— 2019-10-13)","link":"post/weekly"},"plink":"https://yanoo1497.github.io/post/js1/"}