{"title":"sass学习笔记","date":"2019-03-30T05:15:01.577Z","link":"post/sass学习笔记","comments":true,"tags":["sass"],"categories":["css"],"updated":"2019-08-04T13:36:46.329Z","content":"<p>[toc]</p>\n<h2 id=\"一、入门\">一、入门<a href=\"post/sass学习笔记#一、入门\"></a></h2><h4 id=\"1-什么是预编译处理器\">1.什么是预编译处理器<a href=\"post/sass学习笔记#1-什么是预编译处理器\"></a></h4><p>通俗的说，“CSS 预处理器用一种专门的编程语言，进行 Web 页面样式设计，然后再编译成正常的 CSS 文件，以供项目使用。CSS 预处理器为 CSS 增加一些编程的特性，无需考虑浏览器的兼容性问题”，例如你可以在 CSS 中使用变量、简单的逻辑程序、函数（如右侧代码编辑器中就使用了变量$color）等等在编程语言中的一些基本特性，可以让你的 CSS 更加简洁、适应性更强、可读性更佳，更易于代码的维护等诸多好处。</p>\n<h5 id=\"其它预处理器\">其它预处理器<a href=\"post/sass学习笔记#其它预处理器\"></a></h5><ol>\n<li>Sass（SCSS）</li>\n<li>LESS</li>\n<li>Stylus</li>\n<li>Turbine</li>\n<li>Swithch CSS</li>\n<li>CSS Cacheer</li>\n<li>DT CSS</li>\n</ol>\n<p>到目前为止，在众多优秀的 CSS 预处理器语言中就属 Sass、LESS 和 Stylus 最优秀，讨论的也多，对比的也多。</p>\n<h4 id=\"2-什么是-Sass？\">2.什么是 Sass？<a href=\"post/sass学习笔记#2-什么是-Sass？\"></a></h4><p>Sass 是采用 Ruby 语言编写的一款 CSS 预处理语言，它诞生于2007年，是最大的成熟的 CSS 预处理语言。最初它是为了配合 HAML（一种缩进式 HTML 预编译器）而设计的，因此有着和 HTML 一样的缩进式风格。</p>\n<h4 id=\"3-Sass-和-SCSS-有什么区别？\">3.Sass 和 SCSS 有什么区别？<a href=\"post/sass学习笔记#3-Sass-和-SCSS-有什么区别？\"></a></h4><p>Sass 和 SCSS 其实是同一种东西，我们平时都称之为 Sass，两者之间不同之处有以下两点：<br>文件扩展名不同，Sass 是以“.sass”后缀为扩展名，而 SCSS 是以“.scss”后缀为扩展名<br>语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号({})和分号(;)，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。</p>\n<p>先来看一个示例</p>\n<h5 id=\"Sass-语法\">Sass 语法<a href=\"post/sass学习笔记#Sass-语法\"></a></h5><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$font-stack: Helvetica, sans-serif  //定义变量</span><br><span class=\"line\">$primary-color: #333 //定义变量</span><br><span class=\"line\"></span><br><span class=\"line\">body</span><br><span class=\"line\">  font: 100% $font-stack</span><br><span class=\"line\">  color: $primary-color</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"Scss-语法\">Scss 语法<a href=\"post/sass学习笔记#Scss-语法\"></a></h5><figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$font-stack</span>: Helvetica, sans-serif;</span><br><span class=\"line\"><span class=\"variable\">$primary-color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font</span>: <span class=\"number\">100%</span> <span class=\"variable\">$font-stack</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$primary-color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"编译出来的-CSS\">编译出来的 CSS<a href=\"post/sass学习笔记#编译出来的-CSS\"></a></h5><figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font</span>: <span class=\"number\">100%</span> Helvetica, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"Sass-和-CSS-写法有差别：\">Sass 和 CSS 写法有差别：<a href=\"post/sass学习笔记#Sass-和-CSS-写法有差别：\"></a></h4><p>Sass 和 CSS 写法的确存在一定的差异，由于 Sass 是基于 Ruby 写出来，所以其延续了 Ruby 的书写规范。在书写 Sass 时不带有大括号和分号，其主要是依靠严格的缩进方式来控制的。如：</p>\n<h5 id=\"Sass写法：\">Sass写法：<a href=\"post/sass学习笔记#Sass写法：\"></a></h5><figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span></span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span></span><br><span class=\"line\">  background: <span class=\"number\">#f36</span></span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"css写法：\">css写法：<a href=\"post/sass学习笔记#css写法：\"></a></h5><figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#f36</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"SCSS-和-CSS-写法无差别：\">SCSS 和 CSS 写法无差别：<a href=\"post/sass学习笔记#SCSS-和-CSS-写法无差别：\"></a></h4><p>SCSS 和 CSS 写法无差别，这也是 Sass 后来越来越受大众喜欢原因之一。简单点说，把你现有的“.css”文件直接修改成“.scss”即可使用。</p>\n<h2 id=\"二、SCSS语法格式\">二、SCSS语法格式<a href=\"post/sass学习笔记#二、SCSS语法格式\"></a></h2><p>有不少同学使用 Sass 新的语法规则，而文件扩展名依旧使用的是“.sass”，这也就造成血案了，编译时说编译不出来。在此特别提醒新同学：“.sass”只能使用 Sass 老语法规则（缩进规则），“.scss”使用的是 Sass 的新语法规则，也就是 SCSS 语法规则（类似 CSS 语法格式）。</p>\n<h3 id=\"Sass-编译\">Sass 编译<a href=\"post/sass学习笔记#Sass-编译\"></a></h3><h4 id=\"命令编译\">命令编译<a href=\"post/sass学习笔记#命令编译\"></a></h4><p>命令编译是指使用你电脑中的命令终端，通过输入 Sass 指令来编译 Sass。这种编译方式是最直接也是最简单的一种方式。因为只需要在你的命令终端输入：</p>\n<h5 id=\"单文件编译：\">单文件编译：<a href=\"post/sass学习笔记#单文件编译：\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass &lt;要编译的Sass文件路径&gt;/style.scss:&lt;要输出CSS文件路径&gt;/style.css</span><br></pre></td></tr></table></div></figure>\n\n<p>这是对一个单文件进行编译，如果想对整个项目所有 Sass 文件编译成 CSS 文件，可以这样操作：</p>\n<h5 id=\"多文件编译：\">多文件编译：<a href=\"post/sass学习笔记#多文件编译：\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass sass/:css/</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"缺点及解决方法：\">缺点及解决方法：<a href=\"post/sass学习笔记#缺点及解决方法：\"></a></h5><p>在实际编译过程中，你会发现上面的命令，只能一次性编译。每次个性保存“.scss”文件之后，都得重新执行一次这样的命令。如此操作太麻烦，其实还有一种方法，就是在编译Sass 时，开启“watch”功能，这样只要你的代码进行任保修改，都能自动监测到代码的变化，并且给你直接编译出来：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass --watch &lt;要编译的Sass文件路径&gt;/style.scss:&lt;要输出CSS文件路径&gt;/style.css</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"GUI工具编译\">GUI工具编译<a href=\"post/sass学习笔记#GUI工具编译\"></a></h4><p>我一直讨厌使用命令来做事情，我喜欢那种能看得到的界面操作。那么你可以考虑使用 GUI 界面工具来对 Sass 进行编译。当然不同的 GUI 工具操作方法略有不同。如果在此也一一对编译的界面工具做详细的介绍。我们可能需要写一本书来介绍这些编译工具的操作了。所以我们这里做一下简单介绍，对于 GUI 界面编译工具，目前较为流行的主要有：</p>\n<p>Koala (<a href=\"http://koala-app.com/\" target=\"_blank\" rel=\"noopener\">http://koala-app.com/</a>)<br>Compass.app（<a href=\"http://compass.kkbox.com/）\" target=\"_blank\" rel=\"noopener\">http://compass.kkbox.com/）</a><br>Scout（<a href=\"http://mhs.github.io/scout-app/）\" target=\"_blank\" rel=\"noopener\">http://mhs.github.io/scout-app/）</a><br>CodeKit（<a href=\"https://incident57.com/codekit/index.html）\" target=\"_blank\" rel=\"noopener\">https://incident57.com/codekit/index.html）</a><br>Prepros（<a href=\"https://prepros.io/）\" target=\"_blank\" rel=\"noopener\">https://prepros.io/）</a></p>\n<p>相比之下，我比较推荐使用以下两个：</p>\n<p>Koala (<a href=\"http://www.w3cplus.com/preprocessor/sass-gui-tool-koala.html\" target=\"_blank\" rel=\"noopener\">http://www.w3cplus.com/preprocessor/sass-gui-tool-koala.html</a>) <br><br>CodeKit (<a href=\"http://www.w3cplus.com/preprocessor/sass-gui-tool-codekit.html\" target=\"_blank\" rel=\"noopener\">http://www.w3cplus.com/preprocessor/sass-gui-tool-codekit.html</a>)</p>\n<h4 id=\"自动化编译\">自动化编译<a href=\"post/sass学习笔记#自动化编译\"></a></h4><h5 id=\"1、Gulp-配置-Sass-编译的示例代码\">1、Gulp 配置 Sass 编译的示例代码<a href=\"post/sass学习笔记#1、Gulp-配置-Sass-编译的示例代码\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require('gulp');</span><br><span class=\"line\">var sass = require('gulp-sass');</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task('sass', function () &#123;</span><br><span class=\"line\">    gulp.src('./scss/*.scss')</span><br><span class=\"line\">        <span class=\"selector-class\">.pipe</span>(sass())</span><br><span class=\"line\">        .pipe(gulp.dest('./css'));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task('watch', function() &#123;</span><br><span class=\"line\">    gulp.watch('scss/*.scss', ['sass']);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task('default', ['sass','watch']);</span><br></pre></td></tr></table></div></figure>\n\n<p>设置输出风格</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task('sass', function () &#123;</span><br><span class=\"line\"> return gulp.src('./sass/**/*.scss')</span><br><span class=\"line\">   <span class=\"selector-class\">.pipe</span>(sass(&#123;outputStyle: <span class=\"string\">'expanded'</span>&#125;).on(<span class=\"string\">'error'</span>, sass.logError))</span><br><span class=\"line\">   .pipe(gulp.dest(<span class=\"string\">'./css'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"2、Grunt-配置-Sass-编译的示例代码\">2、Grunt 配置 Sass 编译的示例代码<a href=\"post/sass学习笔记#2、Grunt-配置-Sass-编译的示例代码\"></a></h5><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</span><br><span class=\"line\">    grunt.initConfig(&#123;</span><br><span class=\"line\">        pkg: grunt.file.readJSON(<span class=\"string\">'package.json'</span>),</span><br><span class=\"line\">        sass: &#123;</span><br><span class=\"line\">            dist: &#123;</span><br><span class=\"line\">                files: &#123;</span><br><span class=\"line\">                    <span class=\"string\">'style/style.css'</span> : <span class=\"string\">'sass/style.scss'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        watch: &#123;</span><br><span class=\"line\">            css: &#123;</span><br><span class=\"line\">                files: <span class=\"string\">'**/*.scss'</span>,</span><br><span class=\"line\">                tasks: [<span class=\"string\">'sass'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-sass'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-watch'</span>);</span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'default'</span>,[<span class=\"string\">'watch'</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>想了解 Grunt 同学请单击这里学习<a href=\"http://www.imooc.com/learn/30\" target=\"_blank\" rel=\"noopener\">《Grunt-beginner前端自动化工具》</a>。</p>\n<h3 id=\"Sass-常见的编译错误\">[Sass]常见的编译错误<a href=\"post/sass学习笔记#Sass-常见的编译错误\"></a></h3><p>在编译 Sass 代码时常常会碰到一些错误，让编译失败。这样的错误有系统造成的也有人为造成的，但大部分都是人为过失引起编译失败。<br></p>\n<p><strong>字符编译:</strong>而最为常见的一个错误就是字符编译引起的。在Sass的编译的过程中，是不是支持“GBK”编码的。所以在创建 Sass 文件时，就需要将文件编码设置为“utf-8”。<br></p>\n<p><strong>中文字符:</strong>另外一个错误就是路径中的中文字符引起的。建议在项目中文件命名或者文件目录命名不要使用中文字符。而至于人为失误造成的编译失败，在编译过程中都会有具体的说明，大家可以根据编译器提供的错误信息进行对应的修改。</p>\n<h4 id=\"Sass-不同样式风格的输出方法\">[Sass]不同样式风格的输出方法<a href=\"post/sass学习笔记#Sass-不同样式风格的输出方法\"></a></h4><p>众所周知，每个人编写的 CSS 样式风格都不一样，有的喜欢将所有样式代码都写在同一行，而有的喜欢将样式分行书写。在 Sass 中编译出来的样式风格也可以按不同的样式风格显示。其主要包括以下几种样式风格：</p>\n<ol>\n<li>嵌套输出方式 nested</li>\n<li>展开输出方式 expanded  </li>\n<li>紧凑输出方式 compact </li>\n<li>压缩输出方式 compressed</li>\n</ol>\n<h5 id=\"Sass-嵌套输出方式-nested\">[Sass]嵌套输出方式 nested<a href=\"post/sass学习笔记#Sass-嵌套输出方式-nested\"></a></h5><p>Sass 提供了一种嵌套显示 CSS 文件的方式。</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">li</span> &#123; <span class=\"attribute\">display</span>: inline-block; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在编译的时候带上参数“ –style nested”:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass --watch test.scss:test.css --style nested</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS 样式风格：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">list-style</span>: none; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">12px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none; &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>默认是nested，所以加不加–style nested不影响效果。</p>\n<h5 id=\"2、嵌套输出方式-expanded\">2、嵌套输出方式 expanded<a href=\"post/sass学习笔记#2、嵌套输出方式-expanded\"></a></h5><p>这个输出的 CSS 样式风格和 nested 类似，只是大括号在另起一行，同样上面的代码，编译出来：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">12px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"3、紧凑输出方式-compact\">3、紧凑输出方式 compact<a href=\"post/sass学习笔记#3、紧凑输出方式-compact\"></a></h5><p>该方式适合那些喜欢单行 CSS 样式格式的朋友，编译后的代码如下：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>; <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>; <span class=\"attribute\">list-style</span>: none; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">li</span> &#123; <span class=\"attribute\">display</span>: inline-block; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123; <span class=\"attribute\">display</span>: block; <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">12px</span>; <span class=\"attribute\">text-decoration</span>: none; &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"4-压缩输出方式-compressed\">4.压缩输出方式 compressed<a href=\"post/sass学习笔记#4-压缩输出方式-compressed\"></a></h5><p>压缩输出方式会去掉标准的 Sass 和 CSS 注释及空格。也就是压缩好的 CSS 代码样式风格：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span>&#123;<span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;<span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;<span class=\"attribute\">list-style</span>:none&#125;nav li&#123;display:inline-block&#125;nav a&#123;display:block;<span class=\"attribute\">padding</span>:<span class=\"number\">6px</span> <span class=\"number\">12px</span>;<span class=\"attribute\">text-decoration</span>:none&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的CSS样式风格的选择完全是个人喜好问题，可以根据自己喜欢的风格选择参数。<br>一段时间之后，你实际上就不再需要写 CSS 代码了，只用写 Sass 代码。在这种情况下，你只需要设定输出格式为压缩格式，知道输出的 CSS 代码可以直接使用即可。</p>\n<h4 id=\"Sass-的调试\">Sass 的调试<a href=\"post/sass学习笔记#Sass-的调试\"></a></h4><p>Sass 调试一直以来都是一件头痛的事情，使用 Sass 的同学都希望能在浏览器中直接调试 Sass 文件，能找到对应的行数。值得庆幸的是，现在实现并不是一件难事，只要你的浏览器支持“sourcemap”功能即可。早一点的版本，需要在编译的时候添加“–sourcemap”  参数：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass --watch --scss --sourcemap <span class=\"selector-tag\">style</span><span class=\"selector-class\">.scss</span>:style.css</span><br></pre></td></tr></table></div></figure>\n\n<p>在 Sass3.3 版本之上（我测试使用的版本是 3.4.7），不需要添加这个参数也可以：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass --watch <span class=\"selector-tag\">style</span><span class=\"selector-class\">.scss</span>:style.css</span><br></pre></td></tr></table></div></figure>\n\n<p>在命令终端，你将看到一个信息：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; Change detected to: style.scss</span><br><span class=\"line\">  write style.css</span><br><span class=\"line\">  write style.css.map</span><br></pre></td></tr></table></div></figure>\n\n<p>这时你就可以像展示的 gif 图一样，调试你的 Sass 代码。<br><img src=\"http://img.mukewang.com/54f7b71d0001bb0b05050268.jpg\" alt=\"image\"></p>\n<h2 id=\"sass的基本特性\">sass的基本特性<a href=\"post/sass学习笔记#sass的基本特性\"></a></h2><h3 id=\"声明变量\">声明变量<a href=\"post/sass学习笔记#声明变量\"></a></h3><p>在有些编程语言中（如，JavaScript）声明变量都是使用关键词“var”开头，但是在 Sass 不使用这个关键词，而是使用大家都喜欢的美元符号“$”开头。我想用一张图来解释，我一直坚信，一图胜千言万语：<br><img src=\"http://img.mukewang.com/551e065c0001435e07870307.jpg\" alt=\"image\"><br>上图非常清楚告诉了大家，Sass 的变量包括三个部分：</p>\n<ol>\n<li>声明变量的符号“$”</li>\n<li>变量名称</li>\n<li>赋予变量的值</li>\n</ol>\n<p>来看一个简单的示例，假设你的按钮颜色可以给其声明几个变量：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$brand-primary</span> : darken(<span class=\"number\">#428bca</span>, <span class=\"number\">6.5%</span>) !default; <span class=\"comment\">// #337ab7</span></span><br><span class=\"line\"><span class=\"variable\">$btn-primary-color</span> : <span class=\"number\">#fff</span> !default;</span><br><span class=\"line\"><span class=\"variable\">$btn-primary-bg</span> : <span class=\"variable\">$brand-primary</span> !default;</span><br><span class=\"line\"><span class=\"variable\">$btn-primary-border</span> : darken(<span class=\"variable\">$btn-primary-bg</span>, <span class=\"number\">5%</span>) !default;</span><br></pre></td></tr></table></div></figure>\n\n<p>如果值后面加上!default则表示默认值。</p>\n<p>注：了解 Bootstrap 的 Sass 版本的同学，就一眼能看出，上面的示例代码是 Bootstrap 定义 primarybutton 的颜色。</p>\n<h3 id=\"普通变量与默认变量\">普通变量与默认变量<a href=\"post/sass学习笔记#普通变量与默认变量\"></a></h3><h4 id=\"普通变量\">普通变量<a href=\"post/sass学习笔记#普通变量\"></a></h4><p>定义之后可以在全局范围内使用。</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fontSize</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"variable\">$fontSize</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译后的css代码：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"默认变量\">默认变量<a href=\"post/sass学习笔记#默认变量\"></a></h4><p>sass 的默认变量仅需要在值后面加上 !default 即可。</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$baseLineHeight</span>:<span class=\"number\">1.5</span> !default;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"variable\">$baseLineHeight</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">编译后的css代码：</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">1.5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>sass 的默认变量一般是用来设置默认值，然后根据需求来覆盖的，覆盖的方式也很简单，只需要在默认变量之前重新声明下变量即可。</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$baseLineHeight</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable\">$baseLineHeight</span>: <span class=\"number\">1.5</span> !default;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"variable\">$baseLineHeight</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">编译后的css代码：</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>可以看出现在编译后的 line-height 为 2，而不是我们默认的 1.5。默认变量的价值在进行组件化开发的时候会非常有用。</p>\n<p>!default应该是一个默认值，就相当于在一个变量里，先设置一个数值，如果有其他的值则优先替换为实际的，没有其他的则显示这个默认的</p>\n<h6 id=\"优先级\">优先级<a href=\"post/sass学习笔记#优先级\"></a></h6><p>!default &lt; 新属性值 &lt; !important(按css的书写)</p>\n<p><strong>scss中覆盖默认变量的方式：在默认变量之前重新声明</strong></p>\n<h4 id=\"变量的调用\">变量的调用<a href=\"post/sass学习笔记#变量的调用\"></a></h4><p>在 Sass 中声明了变量之后，就可以在需要的地方调用变量。调用变量的方法也非常的简单。<br>比如在定义了变量</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$brand-primary</span> : darken(<span class=\"number\">#428bca</span>, <span class=\"number\">6.5%</span>) !default; <span class=\"comment\">// #337ab7</span></span><br><span class=\"line\"><span class=\"variable\">$btn-primary-color</span>: <span class=\"number\">#fff</span> !default;</span><br><span class=\"line\"><span class=\"variable\">$btn-primary-bg</span> : <span class=\"variable\">$brand-primary</span> !default;</span><br><span class=\"line\"><span class=\"variable\">$btn-primary-border</span> : darken(<span class=\"variable\">$btn-primary-bg</span>, <span class=\"number\">5%</span>) !default;</span><br></pre></td></tr></table></div></figure>\n\n<p>在按钮 button 中调用，可以按下面的方式调用</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn-primary</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">background-color</span>: <span class=\"variable\">$btn-primary-bg</span>;</span><br><span class=\"line\">   <span class=\"attribute\">color</span>: <span class=\"variable\">$btn-primary-color</span>;</span><br><span class=\"line\">   <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"variable\">$btn-primary-border</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的CSS:</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn-primary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#337ab7</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#2e6da4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"全局变量与局部变量\">全局变量与局部变量<a href=\"post/sass学习笔记#全局变量与局部变量\"></a></h3><p>Sass 中变量的作用域在过去几年已经发生了一些改变。直到最近，规则集和其他范围内声明变量的作用域才默认为本地。如果已经存在同名的全局变量，从 3.4 版本开始，Sass 已经可以正确处理作用域的概念，并通过创建一个新的局部变量来代替。</p>\n<p>先来看一下代码例子：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SCSS</span></span><br><span class=\"line\"><span class=\"variable\">$color</span>: orange !default;<span class=\"comment\">//定义全局变量(在选择器、函数、混合宏...的外面定义的变量为全局变量)</span></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;<span class=\"comment\">//调用全局变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">em</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">$color</span>: red;<span class=\"comment\">//定义局部变量</span></span><br><span class=\"line\">  <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;<span class=\"comment\">//调用局部变量</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;<span class=\"comment\">//调用全局变量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>css 的结果：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//CSS</span></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: orange;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">em</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面的示例演示可以得知，在元素内部定义的变量不会影响其他元素。如此可以简单的理解成，全局变量就是定义在元素外面的变量，如下代码：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$color</span>:orange !default;</span><br></pre></td></tr></table></div></figure>\n\n<p>$color 就是一个全局变量，而定义在元素内部的变量，比如 $color:red; 是一个局部变量。<br>除此之外，Sass 现在还提供一个 !global 参数。!global 和 !default 对于定义变量都是很有帮助的。我们之后将会详细介绍这两个参数的使用以及其功能。</p>\n<h4 id=\"全局变量的影子\">全局变量的影子<a href=\"post/sass学习笔记#全局变量的影子\"></a></h4><p>当在局部范围（选择器内、函数内、混合宏内…）声明一个已经存在于全局范围内的变量时，局部变量就成为了全局变量的影子。基本上，局部变量只会在局部范围内覆盖全局变量。<br>上面例子中的 em 选择器内的变量 $color 就是一个全局变量的影子。</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SCSS</span></span><br><span class=\"line\"><span class=\"variable\">$color</span>: orange !default;<span class=\"comment\">//定义全局变量</span></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;<span class=\"comment\">//调用全局变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">em</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">$color</span>: red;<span class=\"comment\">//定义局部变量（全局变量 $color 的影子）</span></span><br><span class=\"line\">  <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$color</span>;<span class=\"comment\">//调用局部变量</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"什么时候声明变量？\">什么时候声明变量？<a href=\"post/sass学习笔记#什么时候声明变量？\"></a></h4><p>我的建议，创建变量只适用于感觉确有必要的情况下。不要为了某些骇客行为而声明新变量，这丝毫没有作用。只有满足所有下述标准时方可创建新变量：</p>\n<ol>\n<li>该值至少重复出现了两次；</li>\n<li>该值至少可能会被更新一次；</li>\n<li>该值所有的表现都与变量有关（非巧合）。</li>\n</ol>\n<p>基本上，没有理由声明一个永远不需要更新或者只在单一地方使用变量。</p>\n<h3 id=\"嵌套-选择器嵌套\">嵌套-选择器嵌套<a href=\"post/sass学习笔记#嵌套-选择器嵌套\"></a></h3><p>Sass 中还提供了选择器嵌套功能，但这也并不意味着你在 Sass 中的嵌套是无节制的，因为你嵌套的层级越深，编译出来的 CSS 代码的选择器层级将越深，这往往是大家不愿意看到的一点。这个特性现在正被众多开发者滥用。<br>选择器嵌套为样式表的作者提供了一个通过局部选择器相互嵌套实现全局选择的方法，Sass 的嵌套分为三种：</p>\n<ol>\n<li>选择器嵌套</li>\n<li>属性嵌套</li>\n<li>伪类嵌套</li>\n</ol>\n<h4 id=\"1、选择器嵌套\">1、选择器嵌套<a href=\"post/sass学习笔记#1、选择器嵌套\"></a></h4><p>假设我们有一段这样的结构：</p>\n<figure class=\"highlight html\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">“##”</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">“##”</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">“##”</span>&gt;</span>Blog<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>想选中 header 中的 a 标签，在写 CSS 会这样写：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>那么在 Sass 中，就可以使用选择器的嵌套来实现：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">header</span> &amp; &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>:green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>&amp;代表&amp;所在的嵌套结构。<br>&amp;理解为父选择器，虽然header是父级，但它写在最里面，&amp;引用父级，即为nav a</p>\n</blockquote>\n<h3 id=\"嵌套-属性嵌套\">嵌套-属性嵌套<a href=\"post/sass学习笔记#嵌套-属性嵌套\"></a></h3><p>Sass 中还提供属性嵌套，CSS 有一些属性前缀相同，只是后缀不一样，比如：border-top/border-right，与这个类似的还有 margin、padding、font 等属性。假设你的样式中用到了：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在 Sass 中我们可以这样写：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: &#123;</span><br><span class=\"line\">   top: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">   <span class=\"attribute\">bottom</span>: <span class=\"number\">1px</span> solid green;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"嵌套-伪类嵌套\">嵌套-伪类嵌套<a href=\"post/sass学习笔记#嵌套-伪类嵌套\"></a></h3><p>其实伪类嵌套和属性嵌套非常类似，只不过他需要借助<code>&amp;</code>符号一起配合使用。我们就拿经典的“clearfix”为例吧：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span>&#123;</span><br><span class=\"line\">&amp;:before,</span><br><span class=\"line\">&amp;:after &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&amp;:after &#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clearfix:before, <span class=\"selector-class\">.clearfix</span>:after &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span>:after &#123;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```scss</span><br><span class=\"line\"></span><br><span class=\"line\">#### 避免选择器嵌套：</span><br><span class=\"line\">1. 选择器嵌套最大的问题是将使最终的代码难以阅读。开发者需要花费巨大精力计算不同缩进级别下的选择器具体的表现效果。&lt;<span class=\"selector-tag\">br</span>&gt;</span><br><span class=\"line\">1. 选择器越具体则声明语句越冗长，而且对最近选择器的引用(&amp;)也越频繁。在某些时候，出现混淆选择器路径和探索下一级选择器的错误率很高，这非常不值得。&lt;<span class=\"selector-tag\">br</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">为了防止此类情况，我们应该尽可能避免选择器嵌套。然而，显然只有少数情况适应这一措施。</span><br><span class=\"line\">### 混合宏-声明混合宏</span><br><span class=\"line\">如果你的整个网站中有几处小样式类似，比如颜色，字体等，在 Sass 可以使用变量来统一处理，那么这种选择还是不错的。但当你的样式变得越来越复杂，需要重复使用大段的样式时，使用变量就无法达到我们目了。这个时候 Sass 中的混合宏就会变得非常有意义。在这一节中，主要向大家介绍 Sass 的混合宏。</span><br><span class=\"line\">#### 1、声明混合宏</span><br><span class=\"line\">不带参数混合宏：</span><br><span class=\"line\">在 Sass 中，使用“@<span class=\"keyword\">mixin</span>”来声明一个混合宏。如：</span><br><span class=\"line\"></span><br><span class=\"line\">```scss</span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> border-radius&#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>其中 @mixin 是用来声明混合宏的关键词，有点类似 CSS 中的 @media、@font-face 一样。border-radius 是混合宏的名称。大括号里面是复用的样式代码。<br>带参数混合宏：<br>除了声明一个不带参数的混合宏之外，还可以在定义混合宏时带有参数，如：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> border-radius(<span class=\"variable\">$radius</span>:<span class=\"number\">5px</span>)&#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"variable\">$radius</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"variable\">$radius</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"复杂的混合宏：\">复杂的混合宏：<a href=\"post/sass学习笔记#复杂的混合宏：\"></a></h4><p>上面是一个简单的定义混合宏的方法，当然， Sass 中的混合宏还提供更为复杂的，你可以在大括号里面写上带有逻辑关系，帮助更好的做你想做的事情,如：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> box-shadow(<span class=\"variable\">$shadow</span>...) &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">if</span> length(<span class=\"variable\">$shadow</span>) &gt;= 1 &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> prefixer(box-shadow, <span class=\"variable\">$shadow</span>);</span><br><span class=\"line\">  &#125; @<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">4px</span> rgba(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,.<span class=\"number\">3</span>);</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> prefixer(box-shadow, <span class=\"variable\">$shadow</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>这个 box-shadow 的混合宏，带有多个参数，这个时候可以使用“ … ”来替代。简单的解释一下，当 $shadow 的参数数量值大于或等于“ 1 ”时，表示有多个阴影值，反之调用默认的参数值“ 0 0 4px rgba(0,0,0,.3) ”。<br>注：复杂的混合宏中的逻辑关系（@if…@else）后面小节会有讲解。</p>\n<h4 id=\"混合宏-调用混合宏\">混合宏-调用混合宏<a href=\"post/sass学习笔记#混合宏-调用混合宏\"></a></h4><p>在 Sass 中通过 @mixin 关键词声明了一个混合宏，那么在实际调用中，其匹配了一个关键词“@include”来调用声明好的混合宏。例如在你的样式中定义了一个圆角的混合宏“border-radius”:</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> border-radius&#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在一个按钮中要调用定义好的混合宏“border-radius”，可以这样使用：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> border-radius;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>这个时候编译出来的 CSS:</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"混合宏的参数–传一个不带值的参数\">混合宏的参数–传一个不带值的参数<a href=\"post/sass学习笔记#混合宏的参数–传一个不带值的参数\"></a></h4><p>Sass 的混合宏有一个强大的功能，可以传参，那么在 Sass 中传参主要有以下几种情形：</p>\n<h5 id=\"A-传一个不带值的参数\">A) 传一个不带值的参数<a href=\"post/sass学习笔记#A-传一个不带值的参数\"></a></h5><p>在混合宏中，可以传一个不带任何值的参数，比如：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> border-radius(<span class=\"variable\">$radius</span>)&#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"variable\">$radius</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"variable\">$radius</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在混合宏“border-radius”中定义了一个不带任何值的参数“$radius”。<br>在调用的时候可以给这个混合宏传一个参数值：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> border-radius(<span class=\"number\">3px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>这里表示给混合宏传递了一个“border-radius”的值为“3px”。<br>编译出来的 CSS:</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"混合宏的参数–传一个带值的参数\">混合宏的参数–传一个带值的参数<a href=\"post/sass学习笔记#混合宏的参数–传一个带值的参数\"></a></h4><p>在 Sass 的混合宏中，还可以给混合宏的参数传一个默认值，例如：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> border-radius(<span class=\"variable\">$radius</span>:<span class=\"number\">3px</span>)&#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"variable\">$radius</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"variable\">$radius</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在混合宏“border-radius”传了一个参数“$radius”，而且给这个参数赋予了一个默认值“3px”。<br>在调用类似这样的混合宏时，会多有一个机会，假设你的页面中的圆角很多地方都是“3px”的圆角，那么这个时候只需要调用默认的混合宏“border-radius”:</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> border-radius;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS:</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>但有的时候，页面中有些元素的圆角值不一样，那么可以随机给混合宏传值，如：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> border-radius(<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS:</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"混合宏的参数–传多个参数\">混合宏的参数–传多个参数<a href=\"post/sass学习笔记#混合宏的参数–传多个参数\"></a></h4><p>Sass 混合宏除了能传一个参数之外，还可以传多个参数，如：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> center(<span class=\"variable\">$width</span>,<span class=\"variable\">$height</span>)&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"variable\">$width</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"variable\">$height</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: -(<span class=\"variable\">$height</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -(<span class=\"variable\">$width</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在混合宏“center”就传了多个参数。在实际调用和其调用其他混合宏是一样的：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box-center</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> center(<span class=\"number\">500px</span>,<span class=\"number\">300px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来 CSS:</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box-center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: -<span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">250px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>  有一个特别的参数“…”。当混合宏传的参数过多之时，可以使用参数来替代，如：</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> box-shadow($shadows...)&#123;</span><br><span class=\"line\">  @<span class=\"keyword\">if</span> length($shadows) &gt;= <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">    -webkit-box-shadow: $shadows;</span><br><span class=\"line\">    box-shadow: $shadows;</span><br><span class=\"line\">  &#125; @<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    $shadows: 0 0 2px rgba(#000,.25);</span><br><span class=\"line\">    -webkit-box-shadow: $shadow;</span><br><span class=\"line\">    box-shadow: $shadow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在实际调用中：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> box-shadow(<span class=\"number\">0</span> 0 1px rgba(<span class=\"number\">#000</span>,.<span class=\"number\">5</span>),<span class=\"number\">0</span> 0 2px rgba(<span class=\"number\">#000</span>,.<span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的CSS:</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.5), <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.2);</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.5), <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(0, 0, 0, 0.2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"混合宏的参数–混合宏的不足\">混合宏的参数–混合宏的不足<a href=\"post/sass学习笔记#混合宏的参数–混合宏的不足\"></a></h4><p>混合宏在实际编码中给我们带来很多方便之处，特别是对于复用重复代码块。但其最大的不足之处是会生成冗余的代码块。比如在不同的地方调用一个相同的混合宏时。如：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> border-radius&#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> border-radius;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> border-radius;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例在“.box”和“.btn”中都调用了定义好的“border-radius”混合宏。先来看编译出来的 CSS：</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上例明显可以看出，Sass 在调用相同的混合宏时，并不能智能的将相同的样式代码块合并在一起。这也是 Sass 的混合宏最不足之处。</p>\n<h3 id=\"扩展-继承\">扩展/继承<a href=\"post/sass学习笔记#扩展-继承\"></a></h3><p>继承对于了解 CSS 的同学来说一点都不陌生，先来看一张图：</p>\n<p>图中代码显示“.col-sub .block li,.col-extra .block li” 继承了 “.item-list ul li”选择器的 “padding : 0;” 和 “ul li” 选择器中的 “list-style : none outside none;”以及 * 选择器中的 “box-sizing:inherit;”。<br>在 Sass 中也具有继承一说，也是继承类中的样式代码块。在 Sass 中是通过关键词 “@extend”来继承已存在的类样式块，从而实现代码的继承。如下所示：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SCSS</span></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-primary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f36</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  @<span class=\"keyword\">extend</span> .btn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-second</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: orange;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  @<span class=\"keyword\">extend</span> .btn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来之后：</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//CSS</span><br><span class=\"line\"><span class=\"selector-class\">.btn</span>, <span class=\"selector-class\">.btn-primary</span>, <span class=\"selector-class\">.btn-second</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-primary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f36</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-second</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-clor</span>: orange;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>从示例代码可以看出，在 Sass 中的继承，可以继承类样式块中所有样式代码，而且编译出来的 CSS 会将选择器合并在一起，形成组合选择器：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span>, <span class=\"selector-class\">.btn-primary</span>, <span class=\"selector-class\">.btn-second</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"占位符-placeholder\">占位符 %placeholder<a href=\"post/sass学习笔记#占位符-placeholder\"></a></h3><p>Sass 中的占位符 %placeholder 功能是一个很强大，很实用的一个功能，这也是我非常喜欢的功能。他可以取代以前 CSS 中的基类造成的代码冗余的情形。因为 %placeholder 声明的代码，如果不被 @extend 调用的话，不会产生任何代码。来看一个演示：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%mt5 &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%pt5&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>这段代码没有被 @extend 调用，他并没有产生任何代码块，只是静静的躺在你的某个 SCSS 文件中。只有通过 @extend 调用才会产生代码：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SCSS</span></span><br><span class=\"line\">%mt5 &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%pt5&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">extend</span> %mt5;</span><br><span class=\"line\">  @<span class=\"keyword\">extend</span> %pt5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">extend</span> %mt5;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> %pt5;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的CSS</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//CSS</span><br><span class=\"line\"><span class=\"selector-class\">.btn</span>, <span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span>, <span class=\"selector-class\">.block</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>从编译出来的 CSS 代码可以看出，通过 @extend 调用的占位符，编译出来的代码会将相同的代码合并在一起。这也是我们希望看到的效果，也让你的代码变得更为干净。</p>\n<h3 id=\"混合宏-VS-继承-VS-占位符\">混合宏 VS 继承 VS 占位符<a href=\"post/sass学习笔记#混合宏-VS-继承-VS-占位符\"></a></h3><p>初学者都常常纠结于这个问题“什么时候用混合宏，什么时候用继承，什么时候使用占位符？”其实他们各有各的优点与缺点，先来看看他们使用效果：</p>\n<h4 id=\"a-Sass-中的混合宏使用\">a) Sass 中的混合宏使用<a href=\"post/sass学习笔记#a-Sass-中的混合宏使用\"></a></h4><p>举例代码见右侧 2-24 行<br>编译出来的 CSS 见右侧结果窗口。<br>总结：编译出来的 CSS 清晰告诉了大家，他不会自动合并相同的样式代码，如果在样式文件中调用同一个混合宏，会产生多个对应的样式代码，造成代码的冗余，这也是 CSSer 无法忍受的一件事情。不过他并不是一无事处，他可以传参数。</p>\n<p>个人建议：如果你的代码块中涉及到变量，建议使用混合宏来创建相同的代码块。</p>\n<h4 id=\"b-Sass-中继承\">b) Sass 中继承<a href=\"post/sass学习笔记#b-Sass-中继承\"></a></h4><p>同样的，将上面代码中的混合宏，使用类名来表示，然后通过继承来调用：<br>代码见右侧 26-48 行<br>总结：使用继承后，编译出来的 CSS 会将使用继承的代码块合并到一起，通过组合选择器的方式向大家展现，比如 .mt, .block, .block span, .header, .header span。这样编译出来的代码相对于混合宏来说要干净的多，也是 CSSer 期望看到。但是他不能传变量参数。</p>\n<p>个人建议：如果你的代码块不需要专任何变量参数，而且有一个基类已在文件中存在，那么建议使用 Sass 的继承。</p>\n<h4 id=\"c-占位符\">c) 占位符<a href=\"post/sass学习笔记#c-占位符\"></a></h4><p>最后来看占位符，将上面代码中的基类 .mt 换成 Sass 的占位符格式：<br>代码见右侧 50-72 行</p>\n<p><strong>总结：</strong><br>编译出来的 CSS 代码和使用继承基本上是相同，只是不会在代码中生成占位符 mt 的选择器。那么占位符和继承的主要区别的，“占位符是独立定义，不调用的时候是不会在 CSS 中产生任何代码；继承是首先有一个基类存在，不管调用与不调用，基类的样式都将会出现在编译出来的 CSS 代码中。”<br>来看一个表格：<br><img src=\"http://img.mukewang.com/55263aa30001913307940364.jpg\" alt=\"image\"></p>\n<h3 id=\"插值\">插值#{}<a href=\"post/sass学习笔记#插值\"></a></h3><p>使用 CSS 预处理器语言的一个主要原因是想使用 Sass 获得一个更好的结构体系。比如说你想写更干净的、高效的和面向对象的 CSS。Sass 中的插值(Interpolation)就是重要的一部分。让我们看一下下面的例子：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$properties</span>: (margin, padding);</span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> set-value(<span class=\"variable\">$side</span>, <span class=\"variable\">$value</span>) &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">each</span> <span class=\"variable\">$prop</span> in <span class=\"variable\">$properties</span> &#123;</span><br><span class=\"line\">        #&#123;<span class=\"variable\">$prop</span>&#125;-#&#123;<span class=\"variable\">$side</span>&#125;: <span class=\"variable\">$value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.login-box</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> set-value(top, 14px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>@each…in…语句会在《Sass进级篇》中 1-6 @each循环 中讲解。<br>它可以让变量和属性工作的很完美，上面的代码编译成 CSS：</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.login-box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>这是 Sass 插值中一个简单的实例。当你想设置属性值的时候你可以使用字符串插入进来。另一个有用的用法是构建一个选择器。可以这样使用：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> generate-sizes(<span class=\"variable\">$class</span>, <span class=\"variable\">$small</span>, <span class=\"variable\">$medium</span>, <span class=\"variable\">$big</span>) &#123;</span><br><span class=\"line\">    .#&#123;<span class=\"variable\">$class</span>&#125;-<span class=\"selector-tag\">small</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"variable\">$small</span>; &#125;</span><br><span class=\"line\">    .#&#123;<span class=\"variable\">$class</span>&#125;-medium &#123; <span class=\"attribute\">font-size</span>: <span class=\"variable\">$medium</span>; &#125;</span><br><span class=\"line\">    .#&#123;<span class=\"variable\">$class</span>&#125;-<span class=\"selector-tag\">big</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"variable\">$big</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">include</span> generate-sizes(<span class=\"string\">\"header-text\"</span>, 12px, 20px, 40px);</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS:<br>.</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">header-text-small</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header-text-medium</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header-text-big</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span>; &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>一旦你发现这一点，你就会想到超级酷的 mixins，用来生成代码或者生成另一个 mixins。然而，这并不完全是可能的。第一个限制，这可能会很删除用于 Sass 变量的插值。</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$margin-big</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\"><span class=\"variable\">$margin-medium</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\"><span class=\"variable\">$margin-small</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> set-value(<span class=\"variable\">$size</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"variable\">$margin</span>-#&#123;<span class=\"variable\">$size</span>&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.login-box</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> set-value(big);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面的 Sass 代码编译出来，你会得到下面的信息：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error style.scss (Line <span class=\"number\">5</span>: Undefined variable: “$margin-<span class=\"string\">\".)</span></span><br></pre></td></tr></table></div></figure>\n\n<p>所以，#{}语法并不是随处可用，你也不能在 mixin 中调用：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> updated-status &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#F00</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$flag</span>: <span class=\"string\">\"status\"</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.navigation</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> updated-#&#123;<span class=\"variable\">$flag</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面的代码在编译成 CSS 时同样会报错：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error style.scss (Line <span class=\"number\">7</span>: Invalid CSS after <span class=\"string\">\"...nclude updated-\"</span>: expected <span class=\"string\">\"&#125;\"</span>, was <span class=\"string\">\"#&#123;$flag&#125;;\"</span>)</span><br></pre></td></tr></table></div></figure>\n\n<p>幸运的是，可以使用 @extend 中使用插值。例如：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%updated-status &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#F00</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.selected-status</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$flag</span>: <span class=\"string\">\"status\"</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.navigation</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> %updated-#&#123;<span class=\"variable\">$flag</span>&#125;;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> .selected-#&#123;<span class=\"variable\">$flag</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面的 Sass 代码是可以运行的，因为他给了我们力量，可以动态的插入 .class 和 %placeholder。当然他们不能接受像 mixin 这样的参数，上面的代码编译出来的 CSS:</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.navigation</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#F00</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.selected-status</span>, <span class=\"selector-class\">.navigation</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"注释\">注释<a href=\"post/sass学习笔记#注释\"></a></h3><p>注释对于一名程序员来说，是极其重要，良好的注释能帮助自己或者别人阅读源码。在 Sass 中注释有两种方式，我暂且将其命名为：</p>\n<ol>\n<li>类似 CSS 的注释方式，使用 ”/* ”开头，结属使用 ”*/ ”</li>\n<li>类似 JavaScript 的注释方式，使用“//”<br>两者区别，前者会在编译出来的 CSS 显示，后者在编译出来的 CSS 中不会显示，来看一个示例：</li>\n</ol>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个占位符</span></span><br><span class=\"line\"></span><br><span class=\"line\">%mt5 &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*调用一个占位符*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">extend</span> %mt5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的CSS</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*调用一个占位符*/</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"数据类型\">数据类型<a href=\"post/sass学习笔记#数据类型\"></a></h3><p> Sass 和 JavaScript 语言类似，也具有自己的数据类型，在 Sass 中包含以下几种数据类型：</p>\n<ol>\n<li>数字: 如，1、 2、 13、 10px；</li>\n<li>字符串：有引号字符串或无引号字符串，如，”foo”、 ‘bar’、 baz；</li>\n<li>颜色：如，blue、 #04a3f9、 rgba(255,0,0,0.5)；</li>\n<li>布尔型：如，true、 false；</li>\n<li>空值：如，null；</li>\n<li>值列表：用空格或者逗号分开，如，1.5em 1em 0 2em 、 Helvetica, Arial, sans-serif。</li>\n</ol>\n<p>SassScript 也支持其他 CSS 属性值（property value），比如 Unicode 范围，或 !important 声明。然而，Sass 不会特殊对待这些属性值，一律视为无引号字符串 (unquoted strings)。</p>\n<h4 id=\"字符串\">字符串<a href=\"post/sass学习笔记#字符串\"></a></h4><p>SassScript 支持 CSS 的两种字符串类型：</p>\n<ol>\n<li>有引号字符串 (quoted strings)，如 “Lucida Grande” 、’<a href=\"http://sass-lang.com&#39;；\" target=\"_blank\" rel=\"noopener\">http://sass-lang.com&#39;；</a></li>\n<li>无引号字符串 (unquoted strings)，如 sans-serifbold。<br>在编译 CSS 文件时不会改变其类型。只有一种情况例外，使用 #{ }插值语句 (interpolation) 时，有引号字符串将被编译为无引号字符串，这样方便了在混合指令 (mixin) 中引用选择器名。</li>\n</ol>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> firefox-message(<span class=\"variable\">$selector</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> #&#123;<span class=\"variable\">$selector</span>&#125;:before &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"Hi, Firefox users!\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">include</span> firefox-message(<span class=\"string\">\".header\"</span>);</span><br></pre></td></tr></table></div></figure>\n\n<p>编译为：</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> <span class=\"selector-class\">.header</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"Hi, Firefox users!\"</span>; &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>需要注意的是：当 deprecated = property syntax 时 （暂时不理解是怎样的情况），所有的字符串都将被编译为无引号字符串，不论是否使用了引号。</p>\n<h4 id=\"值列表\">值列表<a href=\"post/sass学习笔记#值列表\"></a></h4><p>所谓值列表 (lists) 是指 Sass 如何处理 CSS 中：<br>margin: 10px 15px 0 0</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n\n<p>或者： </p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">font-face</span>: <span class=\"selector-tag\">Helvetica</span>, <span class=\"selector-tag\">Arial</span>, <span class=\"selector-tag\">sans-serif</span></span><br></pre></td></tr></table></div></figure>\n\n<p>像上面这样通过空格或者逗号分隔的一系列的值。<br>事实上，独立的值也被视为值列表——只包含一个值的值列表。</p>\n<p>Sass列表函数（Sass list functions）赋予了值列表更多功能（Sass进级会有讲解）：</p>\n<ol>\n<li>nth函数（nth function） 可以直接访问值列表中的某一项；</li>\n<li>join函数（join function） 可以将多个值列表连结在一起；</li>\n<li>append函数（append function） 可以在值列表中添加值； </li>\n<li>@each规则（@each rule） 则能够给值列表中的每个项目添加样式。</li>\n</ol>\n<p>值列表中可以再包含值列表，比如 1px 2px, 5px 6px 是包含 1px 2px 与 5px 6px 两个值列表的值列表。如果内外两层值列表使用相同的分隔方式，要用圆括号包裹内层，所以也可以写成 (1px 2px) (5px 6px)。当值列表被编译为 CSS 时，Sass 不会添加任何圆括号，因为 CSS 不允许这样做。(1px 2px) (5px 6px)与 1px 2px 5px 6px 在编译后的 CSS 文件中是一样的，但是它们在 Sass 文件中却有不同的意义，前者是包含两个值列表的值列表，而后者是包含四个值的值列表。</p>\n<p>可以用 () 表示空的列表，这样不可以直接编译成 CSS，比如编译 font-family: ()时，Sass 将会报错。如果值列表中包含空的值列表或空值，编译时将清除空值，比如 1px 2px () 3px 或 1px 2px null 3px。</p>\n<h3 id=\"Sass运算-加法\">[Sass运算]加法<a href=\"post/sass学习笔记#Sass运算-加法\"></a></h3><p>程序中的运算是常见的一件事情，但在 CSS 中能做运算的，到目前为止仅有 calc() 函数可行。但在 Sass 中，运算只是其基本特性之一。在 Sass 中可以做各种数学计算，在接下来的章节中，主要和大家一起探讨有关于 Sass 中的数学运算。</p>\n<h4 id=\"（一）、加法\">（一）、加法<a href=\"post/sass学习笔记#（一）、加法\"></a></h4><p>加法运算是 Sass 中运算中的一种，在变量或属性中都可以做加法运算。如：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span> + <span class=\"number\">8in</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS:</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">788px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>但对于携带不同类型的单位时，在 Sass 中计算会报错，如下例所示：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span> + <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译的时候，编译器会报错：“Incompatible units: ‘em’ and ‘px’.”<br>in mm cm  pt pc px等绝对单位都能运算<br><br>ex em rem等相对当前字体的都不能运算</p>\n<h3 id=\"Sass运算-减法\">[Sass运算]减法<a href=\"post/sass学习笔记#Sass运算-减法\"></a></h3><p>Sass 的减法运算和加法运算类似，我们通过一个简单的示例来做阐述：</p>\n<figure class=\"highlight scss\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$full-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\"><span class=\"variable\">$sidebar-width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"variable\">$full-width</span> -  <span class=\"variable\">$sidebar-width</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS 如下：</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">760px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>同样的，运算时碰到不同类型的单位时，编译也会报错，如：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$full-width: 960px;</span><br><span class=\"line\"></span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  width: $full-width -  1em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译的时候，编译器报“Incompatible units: ‘em’ and ‘px’.”错误。</p>\n<h3 id=\"Sass运算-乘法\">[Sass运算]乘法<a href=\"post/sass学习笔记#Sass运算-乘法\"></a></h3><p>Sass 中的乘法运算和前面介绍的加法与减法运算还略有不同。虽然他也能够支持多种单位（比如 em ,px , %），但当一个单位同时声明两个值时会有问题。比如下面的示例：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width:10px * 2px;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译的时候报“20px*px isn’t a valid CSS value.”错误信息。<br>如果进行乘法运算时，两个值单位相同时，只需要为一个数值提供单位即可。上面的示例可以修改成：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: 10px * 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: 20px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>Sass 的乘法运算和加法、减法运算一样，在运算中有不同类型的单位时，也将会报错。如下面的示例：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: 20px * 2em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译时报“40em*px isn’t a valid CSS value.”错误信息。</p>\n<h3 id=\"Sass运算-除法\">[Sass运算]除法<a href=\"post/sass学习笔记#Sass运算-除法\"></a></h3><p>Sass 的乘法运算规则也适用于除法运算。不过除法运算还有一个特殊之处。众所周知“/”符号在 CSS 中已做为一种符号使用。因此在 Sass 中做除法运算时，直接使用“/”符号做为除号时，将不会生效，编译时既得不到我们需要的效果，也不会报错。一起先来看一个简单的示例：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: 100px / 2;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS 如下：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: 100px / 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>这样的结果对于大家来说没有任何意义。要修正这个问题，只需要给运算的外面添加一个小括号( )即可：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: (100px / 2);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS 如下：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: 50px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>除了上面情况带有小括号，“/”符号会当作除法运算符之外，如果“/”符号在已有的数学表达式中时，也会被认作除法符号。如下面示例：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: 100px / 2 + 2in;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的CSS：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: 242px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>另外，在 Sass 除法运算中，当用变量进行除法运算时，“/”符号也会自动被识别成除法，如下例所示：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$width: 1000px;</span><br><span class=\"line\">$nums: 10;</span><br><span class=\"line\"></span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">  width: $width / 10;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.list &#123;</span><br><span class=\"line\">  width: $width / $nums;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的CSS:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.item &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.list &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>综合上述，”/  ”符号被当作除法运算符时有以下几种情况：</p>\n<ol>\n<li>•    如果数值或它的任意部分是存储在一个变量中或是函数的返回值。</li>\n<li>•    如果数值被圆括号包围。</li>\n<li>•    如果数值是另一个数学表达式的一部分。<br>如下所示：</li>\n</ol>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//SCSS</span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">  font: 10px/8px;             // 纯 CSS，不是除法运算</span><br><span class=\"line\">  $width: 1000px;</span><br><span class=\"line\">  width: $width/2;            // 使用了变量，是除法运算</span><br><span class=\"line\">  width: round(1.5)/2;        // 使用了函数，是除法运算</span><br><span class=\"line\">  height: (500px/2);          // 使用了圆括号，是除法运算</span><br><span class=\"line\">  margin-left: 5px + 8px/2px; // 使用了加（+）号，是除法运算</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的CSS</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#123;</span><br><span class=\"line\">  font: 10px/8px;</span><br><span class=\"line\">  width: 500px;</span><br><span class=\"line\">  height: 250px;</span><br><span class=\"line\">  margin-left: 9px;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>Sass 的除法运算还有一个情况。我们先回忆一下，在乘法运算时，如果两个值带有相同单位时，做乘法运算时，出来的结果并不是我们需要的结果。但在除法运算时，如果两个值带有相同的单位值时，除法运算之后会得到一个不带单位的数值。如下所示：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: (1000px / 100px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的CSS如下：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: 10;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"Sass运算-变量计算\">[Sass运算]变量计算<a href=\"post/sass学习笔记#Sass运算-变量计算\"></a></h3><p>在 Sass 中除了可以使用数值进行运算之外，还可以使用变量进行计算，其实在前面章节的示例中也或多或少的向大家展示了。在 Sass 中使用变量进行计算，这使得 Sass 的数学运算功能变得更加实用。一起来看一个简单的示例：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$content-width: 720px;</span><br><span class=\"line\">$sidebar-width: 220px;</span><br><span class=\"line\">$gutter: 20px;</span><br><span class=\"line\"></span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  width: $content-width + $sidebar-width + $gutter;</span><br><span class=\"line\">  margin: 0 auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的CSS</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container &#123;</span><br><span class=\"line\">  width: 960px;</span><br><span class=\"line\">  margin: 0 auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"Sass运算-数字运算\">[Sass运算]数字运算<a href=\"post/sass学习笔记#Sass运算-数字运算\"></a></h3><p>在 Sass 运算中数字运算是较为常见的，数字运算包括前面介绍的：加法、减法、乘法和除法等运算。而且还可以通过括号来修改他们的运算先后顺序。和我们数学运算是一样的，一起来看个示例。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: ((220px + 720px) - 11 * 20 ) / 12 ;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">  width: 60px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面这个简单示例是一个典型的计算 Grid 单列列宽的运算。</p>\n<h3 id=\"Sass运算-颜色运算\">[Sass运算]颜色运算<a href=\"post/sass学习笔记#Sass运算-颜色运算\"></a></h3><p>所有算数运算都支持颜色值，并且是分段运算的。也就是说，红、绿和蓝各颜色分段单独进行运算。如：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#123;</span><br><span class=\"line\">  color: #010203 + #040506;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>计算公式为 01 + 04 = 05、02 + 05 = 07 和 03 + 06 = 09， 并且被合成为：<br>如此编译出来的 CSS 为：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#123;</span><br><span class=\"line\">  color: #050709;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>算数运算也能将数字和颜色值 一起运算，同样也是分段运算的。如：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#123;</span><br><span class=\"line\">  color: #010203 * 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>计算公式为 01 * 2 = 02、02 * 2 = 04 和 03 * 2 = 06， 并且被合成为：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#123;</span><br><span class=\"line\">  color: #020406;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"Sass运算-字符运算\">[Sass运算]字符运算<a href=\"post/sass学习笔记#Sass运算-字符运算\"></a></h3><p>在 Sass 中可以通过加法符号“+”来对字符串进行连接。例如：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$content: &quot;Hello&quot; + &quot;&quot; + &quot;Sass!&quot;;</span><br><span class=\"line\">.box:before &#123;</span><br><span class=\"line\">  content: &quot; #&#123;$content&#125; &quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的CSS：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box:before &#123;</span><br><span class=\"line\">  content: &quot; Hello Sass! &quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>除了在变量中做字符连接运算之外，还可以直接通过 +，把字符连接在一起：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div &#123;</span><br><span class=\"line\">  cursor: e + -resize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">编译出来的CSS:</span><br><span class=\"line\">div &#123;</span><br><span class=\"line\">  cursor: e-resize;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>注意，如果有引号的字符串被添加了一个没有引号的字符串 （也就是，带引号的字符串在 + 符号左侧）， 结果会是一个有引号的字符串。 同样的，如果一个没有引号的字符串被添加了一个有引号的字符串 （没有引号的字符串在 + 符号左侧）， 结果将是一个没有引号的字符串。 例如：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p:before &#123;</span><br><span class=\"line\">  content: &quot;Foo &quot; + Bar;</span><br><span class=\"line\">  font-family: sans- + &quot;serif&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p:before &#123;</span><br><span class=\"line\">  content: &quot;Foo Bar&quot;;</span><br><span class=\"line\">  font-family: sans-serif; &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"SASS指令\">SASS指令<a href=\"post/sass学习笔记#SASS指令\"></a></h2><h3 id=\"if\">@if<a href=\"post/sass学习笔记#if\"></a></h3><p>@if 指令是一个 SassScript，它可以根据条件来处理样式块，如果条件为 true 返回一个样式块，反之 false 返回另一个样式块。在 Sass 中除了 @if 之，还可以配合 @else if 和 @else 一起使用。<br>假设要控制一个元素隐藏或显示，我们就可以定义一个混合宏，通过 @if…@else… 来判断传进参数的值来控制 display 的值。如下所示：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//SCSS</span><br><span class=\"line\">@mixin blockOrHidden($boolean:true) &#123;</span><br><span class=\"line\">  @if $boolean &#123;</span><br><span class=\"line\">      @debug &quot;$boolean is #&#123;$boolean&#125;&quot;;</span><br><span class=\"line\">      display: block;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  @else &#123;</span><br><span class=\"line\">      @debug &quot;$boolean is #&#123;$boolean&#125;&quot;;</span><br><span class=\"line\">      display: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.block &#123;</span><br><span class=\"line\">  @include blockOrHidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.hidden&#123;</span><br><span class=\"line\">  @include blockOrHidden(false);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的CSS:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.block &#123;</span><br><span class=\"line\">  display: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.hidden &#123;</span><br><span class=\"line\">  display: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"for循环（上）\">@for循环（上）<a href=\"post/sass学习笔记#for循环（上）\"></a></h4><p>在制作网格系统的时候，大家应该对 .col1~.col12 这样的印象较深。在 CSS 中你需要一个一个去书写，但在 Sass 中，可以使用 @for 循环来完成。在 Sass 的 @for 循环中有两种方式：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@for $i from &lt;start&gt; through &lt;end&gt;</span><br><span class=\"line\">@for $i from &lt;start&gt; to &lt;end&gt;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>$i 表示变量</li>\n<li>start 表示起始值</li>\n<li>end 表示结束值<br>这两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数。<br>如下代码，先来个使用 through 关键字的例子：</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@for $i from 1 through 3 &#123;</span><br><span class=\"line\">  .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.item-1 &#123;</span><br><span class=\"line\">  width: 2em;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.item-2 &#123;</span><br><span class=\"line\">  width: 4em;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.item-3 &#123;</span><br><span class=\"line\">  width: 6em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>再来个 to 关键字的例子：<br>@for $i from 1 to 3 {<br>  .item-#{$i} { width: 2em * $i; }<br>}<br>编译出来的 CSS:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.item-1 &#123;</span><br><span class=\"line\">  width: 2em;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.item-2 &#123;</span><br><span class=\"line\">  width: 4em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"for循环-（下）\">@for循环 （下）<a href=\"post/sass学习笔记#for循环-（下）\"></a></h4><p>上一小节的那个实例几乎用不着，哈哈，所以其实是没什么营养的东西，只是帮助理解了原来 @for 是这么回事。怎么的也不能就这么忽悠大家啊，大家好不容易抽空看下文章，就这么点扯淡的东西怎么对得住呢。下面再来个营养级别的，@for应用在网格系统生成各个格子 class 的代码：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//SCSS </span><br><span class=\"line\">$grid-prefix: span !default;</span><br><span class=\"line\">$grid-width: 60px !default;</span><br><span class=\"line\">$grid-gutter: 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">%grid &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  margin-left: $grid-gutter / 2;</span><br><span class=\"line\">  margin-right: $grid-gutter / 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@for $i from 1 through 12 &#123;</span><br><span class=\"line\">  .#&#123;$grid-prefix&#125;#&#123;$i&#125;&#123;</span><br><span class=\"line\">    width: $grid-width * $i + $grid-gutter * ($i - 1);</span><br><span class=\"line\">    @extend %grid;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.span1, .span2, .span3, .span4, .span5, .span6, .span7, .span8, .span9, .span10, .span11, .span12 &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  margin-left: 10px;</span><br><span class=\"line\">  margin-right: 10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.span1 &#123;</span><br><span class=\"line\">  width: 60px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.span2 &#123;</span><br><span class=\"line\">  width: 140px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.span3 &#123;</span><br><span class=\"line\">  width: 220px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.span4 &#123;</span><br><span class=\"line\">  width: 300px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.span5 &#123;</span><br><span class=\"line\">  width: 380px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.span6 &#123;</span><br><span class=\"line\">  width: 460px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.span7 &#123;</span><br><span class=\"line\">  width: 540px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.span8 &#123;</span><br><span class=\"line\">  width: 620px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.span9 &#123;</span><br><span class=\"line\">  width: 700px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.span10 &#123;</span><br><span class=\"line\">  width: 780px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.span11 &#123;</span><br><span class=\"line\">  width: 860px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.span12 &#123;</span><br><span class=\"line\">  width: 940px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>将上面的示例稍做修改，将 @for through 方式换成 @for to:：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//SCSS</span><br><span class=\"line\">@for $i from 1 to 13 &#123;</span><br><span class=\"line\">  .#&#123;$grid-prefix&#125;#&#123;$i&#125;&#123;</span><br><span class=\"line\">    width: $grid-width * $i + $grid-gutter * ($i - 1);</span><br><span class=\"line\">    @extend %grid;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>其最终编译出来的 CSS 代码和上例所编译出来的一模一样。<br>这两段 Sass 代码并无太多差别，只是 @for中的 <end> 取值不同。配合 through 的 <end> 值是 12，其遍历出来的终点值也是 12，和 <end> 值一样。配合 to 的 <end> 值是 13，其遍历出来的终点值是 12，就是 <end> 对就的值减去 1 。</end></end></end></end></end></p>\n<h4 id=\"while循环\">@while循环<a href=\"post/sass学习笔记#while循环\"></a></h4><p>@while 指令也需要 SassScript 表达式（像其他指令一样），并且会生成不同的样式块，直到表达式值为 false 时停止循环。这个和 @for 指令很相似，只要 @while 后面的条件为 true 就会执行。<br>这里有一个 @while 指令的简单用例：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//SCSS</span><br><span class=\"line\">$types: 4;</span><br><span class=\"line\">$type-width: 20px;</span><br><span class=\"line\"></span><br><span class=\"line\">@while $types &gt; 0 &#123;</span><br><span class=\"line\">    .while-#&#123;$types&#125; &#123;</span><br><span class=\"line\">        width: $type-width + $types;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $types: $types - 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 CSS</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.while-4 &#123;</span><br><span class=\"line\">  width: 24px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.while-3 &#123;</span><br><span class=\"line\">  width: 23px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.while-2 &#123;</span><br><span class=\"line\">  width: 22px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.while-1 &#123;</span><br><span class=\"line\">  width: 21px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"each循环\">@each循环<a href=\"post/sass学习笔记#each循环\"></a></h4><p>@each 循环就是去遍历一个列表，然后从列表中取出对应的值。<br>@each 循环指令的形式：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@each $var in &lt;list&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>如果你没有接触过列表，也不要紧，他也非常简单。<br>在下面的例子中你可以看到，$var 就是一个变量名，<list> 是一个 SassScript 表达式，他将返回一个列表值。变量 $var 会在列表中做遍历，并且遍历出与 $var 对应的样式块。<br>这有一个 @each 指令的简单示例：</list></p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$list: adam john wynn mason kuroir;//$list</span><br></pre></td></tr></table></div></figure>\n\n<p> 就是一个列表</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@mixin author-images &#123;</span><br><span class=\"line\">    @each $author in $list &#123;</span><br><span class=\"line\">        .photo-#&#123;$author&#125; &#123;</span><br><span class=\"line\">            background: url(&quot;/images/avatars/#&#123;$author&#125;.png&quot;) no-repeat;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.author-bio &#123;</span><br><span class=\"line\">    @include author-images;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出 CSS:<br>.</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author-bio .photo-adam &#123;</span><br><span class=\"line\">  background: url(&quot;/images/avatars/adam.png&quot;) no-repeat; &#125;</span><br><span class=\"line\">.author-bio .photo-john &#123;</span><br><span class=\"line\">  background: url(&quot;/images/avatars/john.png&quot;) no-repeat; &#125;</span><br><span class=\"line\">.author-bio .photo-wynn &#123;</span><br><span class=\"line\">  background: url(&quot;/images/avatars/wynn.png&quot;) no-repeat; &#125;</span><br><span class=\"line\">.author-bio .photo-mason &#123;</span><br><span class=\"line\">  background: url(&quot;/images/avatars/mason.png&quot;) no-repeat; &#125;</span><br><span class=\"line\">.author-bio .photo-kuroir &#123;</span><br><span class=\"line\">  background: url(&quot;/images/avatars/kuroir.png&quot;) no-repeat; &#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"SASS函数\">SASS函数<a href=\"post/sass学习笔记#SASS函数\"></a></h2><h3 id=\"Sass的函数简介\">Sass的函数简介<a href=\"post/sass学习笔记#Sass的函数简介\"></a></h3><p>在 Sass 中除了可以定义变量，具有 @extend、%placeholder 和 mixins 等特性之外，还自备了一系列的函数功能。其主要包括：</p>\n<ul>\n<li>字符串函数</li>\n<li>数字函数</li>\n<li>列表函数</li>\n<li>颜色函数</li>\n<li>Introspection 函数</li>\n<li>三元函数等</li>\n<li>当然除了自备的函数功能之外，我们还可以根据自己的需求定义函数功能，常常称之为自定义函数。<h4 id=\"字符串函数-unquote-函数\"><a href=\"#字符串函数-unquote-函数\" class=\"headerlink\" title=\"字符串函数-unquote()函数\"></a>字符串函数-unquote()函数</h4>字符串函数顾名思意是用来处理字符串的函数。Sass 的字符串函数主要包括两个函数：</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unquote($string)：删除字符串中的引号；</span><br><span class=\"line\">      quote($string)：给字符串添加引号。</span><br></pre></td></tr></table></div></figure>\n\n<p>1、unquote()函数</p>\n<p>unquote() 函数主要是用来删除一个字符串中的引号，如果这个字符串没有带有引号，将返回原始的字符串。简单的使用终端来测试这个函数的运行结果：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//SCSS</span><br><span class=\"line\">.test1 &#123;</span><br><span class=\"line\">    content:  unquote(&apos;Hello Sass!&apos;) ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test2 &#123;</span><br><span class=\"line\">    content: unquote(&quot;&apos;Hello Sass!&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test3 &#123;</span><br><span class=\"line\">    content: unquote(&quot;I&apos;m Web Designer&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test4 &#123;</span><br><span class=\"line\">    content: unquote(&quot;&apos;Hello Sass!&apos;&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test5 &#123;</span><br><span class=\"line\">    content: unquote(&apos;&quot;Hello Sass!&quot;&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test6 &#123;</span><br><span class=\"line\">    content: unquote(Hello Sass);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译后的 css 代码：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//CSS</span><br><span class=\"line\">.test1 &#123;</span><br><span class=\"line\">  content: Hello Sass!; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.test2 &#123;</span><br><span class=\"line\">  content: &apos;Hello Sass!; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.test3 &#123;</span><br><span class=\"line\">  content: I&apos;m Web Designer; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.test4 &#123;</span><br><span class=\"line\">  content: &apos;Hello Sass!&apos;; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.test5 &#123;</span><br><span class=\"line\">  content: &quot;Hello Sass!&quot;; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.test6 &#123;</span><br><span class=\"line\">  content: Hello Sass; &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>注意：从测试的效果中可以看出，unquote( ) 函数只能删除字符串最前和最后的引号（双引号或单引号），而无法删除字符串中间的引号。如果字符没有带引号，返回的将是字符串本身。</p>\n<h4 id=\"字符串函数-quote-函数\">字符串函数-quote()函数<a href=\"post/sass学习笔记#字符串函数-quote-函数\"></a></h4><p>quote() 函数刚好与 unquote() 函数功能相反，主要用来给字符串添加引号。如果字符串，自身带有引号会统一换成双引号 “”。如：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//SCSS</span><br><span class=\"line\">.test1 &#123;</span><br><span class=\"line\">    content:  quote(&apos;Hello Sass!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test2 &#123;</span><br><span class=\"line\">    content: quote(&quot;Hello Sass!&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test3 &#123;</span><br><span class=\"line\">    content: quote(ImWebDesigner);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test4 &#123;</span><br><span class=\"line\">    content: quote(&apos; &apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 css 代码：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//CSS</span><br><span class=\"line\">.test1 &#123;</span><br><span class=\"line\">  content: &quot;Hello Sass!&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test2 &#123;</span><br><span class=\"line\">  content: &quot;Hello Sass!&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test3 &#123;</span><br><span class=\"line\">  content: &quot;ImWebDesigner&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test4 &#123;</span><br><span class=\"line\">  content: &quot;&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>使用 quote() 函数只能给字符串增加双引号，而且字符串中间有单引号或者空格时，需要用单引号或双引号括起，否则编译的时候将会报错。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test1 &#123;</span><br><span class=\"line\">    content:  quote(Hello Sass);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">这样使用，编译器马上会报错：</span><br><span class=\"line\"></span><br><span class=\"line\">error style.scss (Line 13: $string: (&quot;Hello&quot;&quot;Sass&quot;) is not a string for `quote&apos;)</span><br></pre></td></tr></table></div></figure>\n\n<p>解决方案就是去掉空格，或者加上引号：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test1 &#123;</span><br><span class=\"line\">    content:  quote(HelloSass);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.test1 &#123;</span><br><span class=\"line\">    content:  quote(&quot;Hello Sass&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>同时 quote() 碰到特殊符号，比如： !、?、&gt; 等，除中折号 - 和 下划线_ 都需要使用双引号括起，否则编译器在进行编译的时候同样会报错：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error style.scss (Line 13: Invalid CSS after &quot;...quote(HelloSass&quot;: expected &quot;)&quot;, was &quot;!);&quot;)</span><br><span class=\"line\">error style.scss (Line 16: Invalid CSS after &quot;...t:  quote(Hello&quot;: expected &quot;)&quot;, was “?);&quot;)</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"字符串函数-To-upper-case-、To-lower-case\">字符串函数-To-upper-case()、To-lower-case()<a href=\"post/sass学习笔记#字符串函数-To-upper-case-、To-lower-case\"></a></h4><h5 id=\"1、To-upper-case\">1、To-upper-case()<a href=\"post/sass学习笔记#1、To-upper-case\"></a></h5><p>To-upper-case() 函数将字符串小写字母转换成大写字母。如：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//SCSS</span><br><span class=\"line\">.test &#123;</span><br><span class=\"line\">  text: to-upper-case(aaaaa);</span><br><span class=\"line\">  text: to-upper-case(aA-aAAA-aaa);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 css 代码：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//CSS</span><br><span class=\"line\">.test &#123;</span><br><span class=\"line\">  text: AAAAA;</span><br><span class=\"line\">  text: AA-AAAA-AAA;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"2、To-lower-case\">2、To-lower-case()<a href=\"post/sass学习笔记#2、To-lower-case\"></a></h5><p>To-lower-case() 函数 与 To-upper-case() 刚好相反，将字符串转换成小写字母：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//SCSS</span><br><span class=\"line\">.test &#123;</span><br><span class=\"line\">  text: to-lower-case(AAAAA);</span><br><span class=\"line\">  text: to-lower-case(aA-aAAA-aaa);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译出来的 css 代码：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//CSS</span><br><span class=\"line\">.test &#123;</span><br><span class=\"line\">  text: aaaaa;</span><br><span class=\"line\">  text: aa-aaaa-aaa;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"数字函数简介\">数字函数简介<a href=\"post/sass学习笔记#数字函数简介\"></a></h3><p>Sass 中的数字函数提要针对数字方面提供一系列的函数功能：</p>\n<ul>\n<li>percentage($value)：将一个不带单位的数转换成百分比值；</li>\n<li>round($value)：将数值四舍五入，转换成一个最接近的整数；</li>\n<li>ceil($value)：将大于自己的小数转换成下一位整数；</li>\n<li>floor($value)：将一个数去除他的小数部分；</li>\n<li>abs($value)：返回一个数的绝对值；</li>\n<li>min($numbers…)：找出几个数值之间的最小值；</li>\n<li>max($numbers…)：找出几个数值之间的最大值；</li>\n<li>random(): 获取随机数<br>看到上面函数的简介，对于熟悉Javascript 同学而言并不会感觉陌生。因为他们有很多功能都非常类似，接下来对每个函数进行一些简单的测试 。</li>\n</ul>\n<h4 id=\"数字函数-percentage\">数字函数-percentage()<a href=\"post/sass学习笔记#数字函数-percentage\"></a></h4><p>1、percentage()</p>\n<p>percentage()函数主要是将一个不带单位的数字转换成百分比形式：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; percentage(.2)</span><br><span class=\"line\">20%</span><br><span class=\"line\">&gt;&gt; percentage(2px / 10px)</span><br><span class=\"line\">20%</span><br><span class=\"line\">&gt;&gt; percentage(2em / 10em)</span><br><span class=\"line\">20%</span><br><span class=\"line\">&gt;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">.footer&#123;</span><br><span class=\"line\">    width : percentage(.2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译后的 css 代码：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.footer&#123;</span><br><span class=\"line\">    width : 20%</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>如果您转换的值是一个带有单位的值，那么在编译的时候会报错误信息：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; percentage(2px / 10em)</span><br><span class=\"line\">SyntaxError: $value: 0.2px/em is not a unitless number for `percentage&apos;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"数字函数-round-函数\">数字函数-round()函数<a href=\"post/sass学习笔记#数字函数-round-函数\"></a></h4><p>round() 函数可以将一个数四舍五入为一个最接近的整数：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; round(12.3)</span><br><span class=\"line\">12</span><br><span class=\"line\">&gt;&gt; round(12.5)</span><br><span class=\"line\">13</span><br><span class=\"line\">&gt;&gt; round(1.49999)</span><br><span class=\"line\">1</span><br><span class=\"line\">&gt;&gt; round(2.0)</span><br><span class=\"line\">2</span><br><span class=\"line\">&gt;&gt; round(20%)</span><br><span class=\"line\">20%</span><br><span class=\"line\">&gt;&gt; round(2.2%)</span><br><span class=\"line\">2%</span><br><span class=\"line\">&gt;&gt; round(3.9em)</span><br><span class=\"line\">4em</span><br><span class=\"line\">&gt;&gt; round(2.3px)</span><br><span class=\"line\">2px</span><br><span class=\"line\">&gt;&gt; round(2px / 3px)</span><br><span class=\"line\">1</span><br><span class=\"line\">&gt;&gt; round(1px / 3px)</span><br><span class=\"line\">0</span><br><span class=\"line\">&gt;&gt; round(3px / 2em)</span><br><span class=\"line\">2px/em</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">   width:round(12.3px)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编译后的 css 代码：</span><br><span class=\"line\"></span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">  width: 12px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在round() 函数中可以携带单位的任何数值。</p>\n<h4 id=\"数字函数-ceil-函数\">数字函数-ceil()函数<a href=\"post/sass学习笔记#数字函数-ceil-函数\"></a></h4><p>ceil() 函数将一个数转换成最接近于自己的整数，会将一个大于自身的任何小数转换成大于本身 1 的整数。也就是只做入，不做舍的计算：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; ceil(2.0)</span><br><span class=\"line\">2</span><br><span class=\"line\">&gt;&gt; ceil(2.1)</span><br><span class=\"line\">3</span><br><span class=\"line\">&gt;&gt; ceil(2.6)</span><br><span class=\"line\">3</span><br><span class=\"line\">&gt;&gt; ceil(2.3%)</span><br><span class=\"line\">3%</span><br><span class=\"line\">&gt;&gt; ceil(2.3px)</span><br><span class=\"line\">3px</span><br><span class=\"line\">&gt;&gt; ceil(2.5px)</span><br><span class=\"line\">3px</span><br><span class=\"line\">&gt;&gt; ceil(2px / 3px)</span><br><span class=\"line\">1</span><br><span class=\"line\">&gt;&gt; ceil(2% / 3px)</span><br><span class=\"line\">1%/px</span><br><span class=\"line\">&gt;&gt; ceil(1em / 5px)</span><br><span class=\"line\">1em/px</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">   width:ceil(12.3px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译后的 css 代码：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.footer &#123;</span><br><span class=\"line\">  width: 13px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"数字函数-floor-函数\">数字函数-floor()函数<a href=\"post/sass学习笔记#数字函数-floor-函数\"></a></h4><p>floor() 函数刚好与 ceil() 函数功能相反，其主要将一个数去除其小数部分，并且不做任何的进位。也就是只做舍，不做入的计算：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; floor(2.1)</span><br><span class=\"line\">2</span><br><span class=\"line\">&gt;&gt; floor(2.5)</span><br><span class=\"line\">2</span><br><span class=\"line\">&gt;&gt; floor(3.5%)</span><br><span class=\"line\">3%</span><br><span class=\"line\">&gt;&gt; floor(10.2px)</span><br><span class=\"line\">10px</span><br><span class=\"line\">&gt;&gt; floor(10.8em)</span><br><span class=\"line\">10em</span><br><span class=\"line\">&gt;&gt; floor(2px / 10px)</span><br><span class=\"line\">0</span><br><span class=\"line\">&gt;&gt; floor(3px / 1em)</span><br><span class=\"line\">3px/em</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">   width:floor(12.3px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译后的 css 代码：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.footer &#123;</span><br><span class=\"line\">  width: 12px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"数字函数-abs-函数\">数字函数-abs()函数<a href=\"post/sass学习笔记#数字函数-abs-函数\"></a></h4><p>abs( ) 函数会返回一个数的绝对值。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; abs(10)</span><br><span class=\"line\">10</span><br><span class=\"line\">&gt;&gt; abs(-10)</span><br><span class=\"line\">10</span><br><span class=\"line\">&gt;&gt; abs(-10px)</span><br><span class=\"line\">10px</span><br><span class=\"line\">&gt;&gt; abs(-2em)</span><br><span class=\"line\">2em</span><br><span class=\"line\">&gt;&gt; abs(-.5%)</span><br><span class=\"line\">0.5%</span><br><span class=\"line\">&gt;&gt; abs(-1px / 2px)</span><br><span class=\"line\">0.5</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">   width:abs(-12.3px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>编译后的 css 代码：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.footer &#123;</span><br><span class=\"line\">  width: 12.3px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"数字函数-min-函数、max-函数\">数字函数-min()函数、max()函数<a href=\"post/sass学习笔记#数字函数-min-函数、max-函数\"></a></h4><h5 id=\"min-函数\">min()函数<a href=\"post/sass学习笔记#min-函数\"></a></h5><p>min() 函数功能主要是在多个数之中找到最小的一个，这个函数可以设置任意多个参数：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; min(1,2,1%,3,300%)</span><br><span class=\"line\">1%</span><br><span class=\"line\">&gt;&gt; min(1px,2,3px)</span><br><span class=\"line\">1px</span><br><span class=\"line\">&gt;&gt; min(1em,2em,6em)</span><br><span class=\"line\">1em</span><br></pre></td></tr></table></div></figure>\n\n<p>不过在 min() 函数中同时出现两种不同类型的单位，将会报错误信息：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; min(1px,1em)</span><br><span class=\"line\">SyntaxError: Incompatible units: &apos;em&apos; and &apos;px&apos;.</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"max-函数\">max()函数<a href=\"post/sass学习笔记#max-函数\"></a></h4><p>max() 函数和 min() 函数一样，不同的是，max() 函数用来获取一系列数中的最大那个值：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; max(1,5)</span><br><span class=\"line\">5</span><br><span class=\"line\">&gt;&gt; max(1px,5px)</span><br><span class=\"line\">5px</span><br></pre></td></tr></table></div></figure>\n\n<p>同样的，如果在 max() 函数中有不同单位，将会报错：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; max(1,3px,5%,6)</span><br><span class=\"line\">SyntaxError: Incompatible units: &apos;%&apos; and ‘px&apos;.</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"数字函数-random-函数\">数字函数-random()函数<a href=\"post/sass学习笔记#数字函数-random-函数\"></a></h4><p>random() 函数是用来获取一个随机数：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; random()</span><br><span class=\"line\">0.03886</span><br><span class=\"line\">&gt;&gt; random()</span><br><span class=\"line\">0.66527</span><br><span class=\"line\">&gt;&gt; random()</span><br><span class=\"line\">0.8125</span><br><span class=\"line\">&gt;&gt; random()</span><br><span class=\"line\">0.26839</span><br><span class=\"line\">&gt;&gt; random()</span><br><span class=\"line\">0.85063</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"列表函数简介\">列表函数简介<a href=\"post/sass学习笔记#列表函数简介\"></a></h3><p>列表函数主要包括一些对列表参数的函数使用，主要包括以下几种：</p>\n<ul>\n<li>length($list)：返回一个列表的长度值；</li>\n<li>nth($list, $n)：返回一个列表中指定的某个标签值</li>\n<li>join($list1, $list2, [$separator])：将两个列给连接在一起，变成一个列表；</li>\n<li>append($list1, $val, [$separator])：将某个值放在列表的最后；</li>\n<li>zip($lists…)：将几个列表结合成一个多维的列表；</li>\n<li>index($list, $value)：返回一个值在列表中的位置值。</li>\n</ul>\n<p>列表函数中的每个函数都有其独特的作用与功能，接下来我们通过命令终端向大家展示每个列表函数的功能与使用。</p>\n<h4 id=\"length-函数\">length()函数<a href=\"post/sass学习笔记#length-函数\"></a></h4><p>length() 函数主要用来返回一个列表中有几个值，简单点说就是返回列表清单中有多少个值：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; length(10px)</span><br><span class=\"line\">1</span><br><span class=\"line\">&gt;&gt; length(10px 20px (border 1px solid) 2em)</span><br><span class=\"line\">4</span><br><span class=\"line\">&gt;&gt; length(border 1px solid)</span><br><span class=\"line\">3</span><br></pre></td></tr></table></div></figure>\n\n<p>length() 函数中的列表参数之间使用空格隔开，不能使用逗号，否则函数将会出错：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; length(10px,20px,(border 1px solid),2em)</span><br><span class=\"line\">SyntaxError: wrong number of arguments (4 for 1) for `length&apos;</span><br><span class=\"line\">&gt;&gt; length(1,2px)</span><br><span class=\"line\">SyntaxError: wrong number of arguments (2 for 1) for `length&apos;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"nth-函数\">nth()函数<a href=\"post/sass学习笔记#nth-函数\"></a></h4><p>语法:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nth($list,$n)</span><br></pre></td></tr></table></div></figure>\n\n<p>nth() 函数用来指定列表中某个位置的值。不过在 Sass 中，nth() 函数和其他语言不同，1 是指列表中的第一个标签值，2 是指列给中的第二个标签值，依此类推。如：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; nth(10px 20px 30px,1)</span><br><span class=\"line\">10px</span><br><span class=\"line\">&gt;&gt; nth((Helvetica,Arial,sans-serif),2)</span><br><span class=\"line\">&quot;Arial&quot;</span><br><span class=\"line\">&gt;&gt; nth((1px solid red) border-top green,1)</span><br><span class=\"line\">(1px &quot;solid&quot; #ff0000)</span><br></pre></td></tr></table></div></figure>\n\n<p>注：在 nth($list,$n) 函数中的 $n 必须是大于 0 的整数：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; nth((1px solid red) border-top green 1 ,0)</span><br><span class=\"line\">SyntaxError: List index 0 must be a non-zero integer for `nth&apos;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"join-函数\">join()函数<a href=\"post/sass学习笔记#join-函数\"></a></h4><p>join() 函数是将两个列表连接合并成一个列表。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; join(10px 20px, 30px 40px)</span><br><span class=\"line\">(10px 20px 30px 40px)</span><br><span class=\"line\">&gt;&gt; join((blue,red),(#abc,#def))</span><br><span class=\"line\">(#0000ff, #ff0000, #aabbcc, #ddeeff)</span><br><span class=\"line\">&gt;&gt; join((blue,red),(#abc #def))</span><br><span class=\"line\">(#0000ff, #ff0000, #aabbcc, #ddeeff)</span><br></pre></td></tr></table></div></figure>\n\n<p>不过 join() 只能将两个列表连接成一个列表，如果直接连接两个以上的列表将会报错：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; join((blue red),(#abc, #def),(#dee #eff))</span><br><span class=\"line\">SyntaxError: $separator: (#ddeeee #eeffff) is not a string for `join&apos;</span><br></pre></td></tr></table></div></figure>\n\n<p>但很多时候不只碰到两个列表连接成一个列表，这个时候就需要将多个 join() 函数合并在一起使用：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; join((blue red), join((#abc #def),(#dee #eff)))</span><br><span class=\"line\">(#0000ff #ff0000 #aabbcc #ddeeff #ddeeee #eeffff)</span><br></pre></td></tr></table></div></figure>\n\n<p>在 join() 函数中还有一个很特别的参数 $separator，这个参数主要是用来给列表函数连接列表值是，使用的分隔符号，默认值为 auto。</p>\n<p>join() 函数中 $separator 除了默认值 auto 之外，还有 comma 和 space 两个值，其中 comma 值指定列表中的列表项值之间使用逗号（,）分隔，space 值指定列表中的列表项值之间使用空格（ ）分隔。</p>\n<p>在 join() 函数中除非明确指定了 $separator值，否则将会有多种情形发生：</p>\n<p>如果列表中的第一个列表中每个值之间使用的是逗号（,），那么 join() 函数合并的列表中每个列表项之间使用逗号,分隔：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; join((blue, red, #eff),(green orange))</span><br><span class=\"line\">(#0000ff, #ff0000, #eeffff, #008000, #ffa500)</span><br></pre></td></tr></table></div></figure>\n\n<p>但当第一个列表中只有一个列表项，那么 join() 函数合并的列表项目中每个列表项目这间使用的分隔符号会根据第二个列表项中使用的，如果第二列表项中使用是,分隔，则使用逗号分隔；如果第二列项之间使用的空格符，则使用空格分隔：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; join(blue,(green, orange))</span><br><span class=\"line\">(#0000ff, #008000, #ffa500)</span><br><span class=\"line\">&gt;&gt; join(blue,(green orange))</span><br><span class=\"line\">(#0000ff #008000 #ffa500)</span><br></pre></td></tr></table></div></figure>\n\n<p>如果列表中的第一个列表中每个值之间使用的是空格，那么 join() 函数合并的列表中每个列表项之间使用空格分隔：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; join((blue green),(red,orange))</span><br><span class=\"line\">(#0000ff #008000 #ff0000 #ffa500)</span><br><span class=\"line\">&gt;&gt; join((blue green),(red orange))</span><br><span class=\"line\">(#0000ff #008000 #ff0000 #ffa500)</span><br></pre></td></tr></table></div></figure>\n\n<p>如果当两个列表中的列表项小于1时，将会以空格分隔：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; join(blue,red)</span><br><span class=\"line\">(#0000ff #ff0000)</span><br></pre></td></tr></table></div></figure>\n\n<p>如此一来，会有多种情形发生，造成使用混乱的情形，如果你无法记得，什么时候会是用逗号分隔合并的列表项，什么时候是使用空格分隔合并 的列表项，在些建议大家使用 join() 函数合并列表项的时候就明确指定 $separator 参数，用来指定合并的列表中使用什么方式来分隔列表项：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; join(blue,red,comma)</span><br><span class=\"line\">(#0000ff, #ff0000)</span><br><span class=\"line\">&gt;&gt; join(blue,red,space)</span><br><span class=\"line\">(#0000ff #ff0000)</span><br><span class=\"line\">&gt;&gt; join((blue green),(red,orange),comma)</span><br><span class=\"line\">(#0000ff, #008000, #ff0000, #ffa500)</span><br><span class=\"line\">&gt;&gt; join((blue green),(red,orange),space)</span><br><span class=\"line\">(#0000ff #008000 #ff0000 #ffa500)</span><br><span class=\"line\">&gt;&gt; join((blue, green),(red,orange),comma)</span><br><span class=\"line\">(#0000ff, #008000, #ff0000, #ffa500)</span><br><span class=\"line\">&gt;&gt; join((blue, green),(red,orange),space)</span><br><span class=\"line\">(#0000ff #008000 #ff0000 #ffa500)</span><br><span class=\"line\">&gt;&gt; join(blue,(red,orange),comma)</span><br><span class=\"line\">(#0000ff, #ff0000, #ffa500)</span><br><span class=\"line\">&gt;&gt; join(blue,(red,orange),space)</span><br><span class=\"line\">(#0000ff #ff0000 #ffa500)</span><br><span class=\"line\">&gt;&gt; join(blue,(red orange),comma)</span><br><span class=\"line\">(#0000ff, #ff0000, #ffa500)</span><br><span class=\"line\">&gt;&gt; join(blue,(red orange),space)</span><br><span class=\"line\">(#0000ff #ff0000 #ffa500)</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"append-函数\">append()函数<a href=\"post/sass学习笔记#append-函数\"></a></h4><p>append() 函数是用来将某个值插入到列表中，并且处于最末位。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; append(10px 20px ,30px)</span><br><span class=\"line\">(10px 20px 30px)</span><br><span class=\"line\">&gt;&gt; append((10px,20px),30px)</span><br><span class=\"line\">(10px, 20px, 30px)</span><br><span class=\"line\">&gt;&gt; append(green,red)</span><br><span class=\"line\">(#008000 #ff0000)</span><br><span class=\"line\">&gt;&gt; append(red,(green,blue))</span><br><span class=\"line\">(#ff0000 (#008000, #0000ff))</span><br></pre></td></tr></table></div></figure>\n\n<p>如果没有明确的指定 $separator 参数值，其默认值是 auto。</p>\n<p>如果列表只有一个列表项时，那么插入进来的值将和原来的值会以空格的方式分隔。<br>如果列表中列表项是以空格分隔列表项，那么插入进来的列表项也将以空格分隔；<br>如果列表中列表项是以逗号分隔列表项，那么插入进来的列表项也将以逗号分隔。<br>当然，在 append() 函数中，可以显示的设置 $separator 参数，</p>\n<p>如果取值为 comma 将会以逗号分隔列表项<br>如果取值为 space 将会以空格分隔列表项</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; append((blue green),red,comma)</span><br><span class=\"line\">(#0000ff, #008000, #ff0000)</span><br><span class=\"line\">&gt;&gt; append((blue green),red,space)</span><br><span class=\"line\">(#0000ff #008000 #ff0000)</span><br><span class=\"line\">&gt;&gt; append((blue, green),red,comma)</span><br><span class=\"line\">(#0000ff, #008000, #ff0000)</span><br><span class=\"line\">&gt;&gt; append((blue, green),red,space)</span><br><span class=\"line\">(#0000ff #008000 #ff0000)</span><br><span class=\"line\">&gt;&gt; append(blue,red,comma)</span><br><span class=\"line\">(#0000ff, #ff0000)</span><br><span class=\"line\">&gt;&gt; append(blue,red,space)</span><br><span class=\"line\">(#0000ff #ff0000)</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"跨浏览器的javascript中鼠标滚轮事件","link":"post/js2"},"plink":"https://yanoo1497.github.io/post/sass学习笔记/","toc":[{"title":"一、入门","id":"一、入门","index":"1"},{"title":"二、SCSS语法格式","id":"二、SCSS语法格式","index":"2","children":[{"title":"Sass 编译","id":"Sass-编译","index":"2.1","children":[{"title":"命令编译","id":"命令编译","index":"2.1.1"},{"title":"GUI工具编译","id":"GUI工具编译","index":"2.1.2"},{"title":"自动化编译","id":"自动化编译","index":"2.1.3"}]},{"title":"[Sass]常见的编译错误","id":"Sass-常见的编译错误","index":"2.2","children":[{"title":"[Sass]不同样式风格的输出方法","id":"Sass-不同样式风格的输出方法","index":"2.2.1"},{"title":"Sass 的调试","id":"Sass-的调试","index":"2.2.2"}]}]},{"title":"sass的基本特性","id":"sass的基本特性","index":"3","children":[{"title":"声明变量","id":"声明变量","index":"3.1"},{"title":"普通变量与默认变量","id":"普通变量与默认变量","index":"3.2","children":[{"title":"普通变量","id":"普通变量","index":"3.2.1"},{"title":"默认变量","id":"默认变量","index":"3.2.2"},{"title":"变量的调用","id":"变量的调用","index":"3.2.3"}]},{"title":"全局变量与局部变量","id":"全局变量与局部变量","index":"3.3","children":[{"title":"全局变量的影子","id":"全局变量的影子","index":"3.3.1"},{"title":"什么时候声明变量？","id":"什么时候声明变量？","index":"3.3.2"}]},{"title":"嵌套-选择器嵌套","id":"嵌套-选择器嵌套","index":"3.4","children":[{"title":"1、选择器嵌套","id":"1、选择器嵌套","index":"3.4.1"}]},{"title":"嵌套-属性嵌套","id":"嵌套-属性嵌套","index":"3.5"},{"title":"嵌套-伪类嵌套","id":"嵌套-伪类嵌套","index":"3.6","children":[{"title":"复杂的混合宏：","id":"复杂的混合宏：","index":"3.6.1"},{"title":"混合宏-调用混合宏","id":"混合宏-调用混合宏","index":"3.6.2"},{"title":"混合宏的参数–传一个不带值的参数","id":"混合宏的参数–传一个不带值的参数","index":"3.6.3"},{"title":"混合宏的参数–传一个带值的参数","id":"混合宏的参数–传一个带值的参数","index":"3.6.4"},{"title":"混合宏的参数–传多个参数","id":"混合宏的参数–传多个参数","index":"3.6.5"},{"title":"混合宏的参数–混合宏的不足","id":"混合宏的参数–混合宏的不足","index":"3.6.6"}]},{"title":"扩展/继承","id":"扩展-继承","index":"3.7"},{"title":"占位符 %placeholder","id":"占位符-placeholder","index":"3.8"},{"title":"混合宏 VS 继承 VS 占位符","id":"混合宏-VS-继承-VS-占位符","index":"3.9","children":[{"title":"a) Sass 中的混合宏使用","id":"a-Sass-中的混合宏使用","index":"3.9.1"},{"title":"b) Sass 中继承","id":"b-Sass-中继承","index":"3.9.2"},{"title":"c) 占位符","id":"c-占位符","index":"3.9.3"}]},{"title":"插值#{}","id":"插值","index":"3.10"},{"title":"注释","id":"注释","index":"3.11"},{"title":"数据类型","id":"数据类型","index":"3.12","children":[{"title":"字符串","id":"字符串","index":"3.12.1"},{"title":"值列表","id":"值列表","index":"3.12.2"}]},{"title":"[Sass运算]加法","id":"Sass运算-加法","index":"3.13","children":[{"title":"（一）、加法","id":"（一）、加法","index":"3.13.1"}]},{"title":"[Sass运算]减法","id":"Sass运算-减法","index":"3.14"},{"title":"[Sass运算]乘法","id":"Sass运算-乘法","index":"3.15"},{"title":"[Sass运算]除法","id":"Sass运算-除法","index":"3.16"},{"title":"[Sass运算]变量计算","id":"Sass运算-变量计算","index":"3.17"},{"title":"[Sass运算]数字运算","id":"Sass运算-数字运算","index":"3.18"},{"title":"[Sass运算]颜色运算","id":"Sass运算-颜色运算","index":"3.19"},{"title":"[Sass运算]字符运算","id":"Sass运算-字符运算","index":"3.20"}]},{"title":"SASS指令","id":"SASS指令","index":"4","children":[{"title":"@if","id":"if","index":"4.1","children":[{"title":"@for循环（上）","id":"for循环（上）","index":"4.1.1"},{"title":"@for循环 （下）","id":"for循环-（下）","index":"4.1.2"},{"title":"@while循环","id":"while循环","index":"4.1.3"},{"title":"@each循环","id":"each循环","index":"4.1.4"}]}]},{"title":"SASS函数","id":"SASS函数","index":"5","children":[{"title":"Sass的函数简介","id":"Sass的函数简介","index":"5.1","children":[{"title":"","id":"字符串函数-unquote-函数","index":"5.1.1"},{"title":"字符串函数-quote()函数","id":"字符串函数-quote-函数","index":"5.1.2"},{"title":"字符串函数-To-upper-case()、To-lower-case()","id":"字符串函数-To-upper-case-、To-lower-case","index":"5.1.3"}]},{"title":"数字函数简介","id":"数字函数简介","index":"5.2","children":[{"title":"数字函数-percentage()","id":"数字函数-percentage","index":"5.2.1"},{"title":"数字函数-round()函数","id":"数字函数-round-函数","index":"5.2.2"},{"title":"数字函数-ceil()函数","id":"数字函数-ceil-函数","index":"5.2.3"},{"title":"数字函数-floor()函数","id":"数字函数-floor-函数","index":"5.2.4"},{"title":"数字函数-abs()函数","id":"数字函数-abs-函数","index":"5.2.5"},{"title":"数字函数-min()函数、max()函数","id":"数字函数-min-函数、max-函数","index":"5.2.6"},{"title":"max()函数","id":"max-函数","index":"5.2.7"},{"title":"数字函数-random()函数","id":"数字函数-random-函数","index":"5.2.8"}]},{"title":"列表函数简介","id":"列表函数简介","index":"5.3","children":[{"title":"length()函数","id":"length-函数","index":"5.3.1"},{"title":"nth()函数","id":"nth-函数","index":"5.3.2"},{"title":"join()函数","id":"join-函数","index":"5.3.3"},{"title":"append()函数","id":"append-函数","index":"5.3.4"}]}]}]}