{"title":"关于 typescript 学习手记（一）基本类型","date":"2019-09-07T04:30:14.000Z","link":"post/ts","tags":["typescript"],"updated":"2019-09-09T13:59:53.033Z","content":"<blockquote>\n<p>用 ts 也算有一段时间了，基本类型是经常用了，但是感觉很多高级功能不清不楚的，并没有发挥使用 ts 编写代码的最大优势。看官网的示例，感觉都比较普通没有解答到我心中的疑惑点。特此回过头来重新了解学习，这篇手记是观看极客时间的视频课《typescript 实战教程》时记录的。第一阶段是简单的收获记录，后续会再看其他文章的观点细化更新笔记内容。</p>\n</blockquote>\n<p>tips: 测试 ts 转 js 的情况，可以直接在官网使用 playgroud 来测试编译后的结果，了解编译后的结构对于我们理解使用 ts 的实际运行效果很有帮助。</p>\n<h2 id=\"基本类型\">基本类型<a href=\"post/ts#基本类型\"></a></h2><h3 id=\"number-string-boolean-等简单基础类型略过\">number\\string\\boolean 等简单基础类型略过<a href=\"post/ts#number-string-boolean-等简单基础类型略过\"></a></h3><h3 id=\"枚举类型\">枚举类型<a href=\"post/ts#枚举类型\"></a></h3><p>可以将在程序中将来可能改变的变量，或者是程序中常见的判断硬编码改为更易于理解的枚举类型，有利于程序的可读性。</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> test &#123;</span><br><span class=\"line\">    success: <span class=\"string\">'成功了'</span></span><br><span class=\"line\">    fail: <span class=\"string\">'失败了'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>常见的赋值方式</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Char &#123;</span><br><span class=\"line\">    <span class=\"comment\">// const 不赋值、赋上枚举值</span></span><br><span class=\"line\">    a,</span><br><span class=\"line\">    b: Char.a,</span><br><span class=\"line\">    <span class=\"comment\">// computed 只有在第一次使用该值后才会被计算</span></span><br><span class=\"line\">    d: <span class=\"built_in\">Math</span>.random(),</span><br><span class=\"line\">    e: <span class=\"string\">'123'</span>.length,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 常量枚举</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">enum</span> Month &#123;</span><br><span class=\"line\">    Jan,</span><br><span class=\"line\">    Feb,</span><br><span class=\"line\">    Mar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 枚举成员的赋值比较约束</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> E &#123;a, b&#125;</span><br><span class=\"line\"><span class=\"keyword\">enum</span> F &#123;a = <span class=\"number\">0</span>, b = <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">enum</span> G &#123;a = <span class=\"string\">'apple'</span>, b = <span class=\"string\">'banana'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> e: E = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> f: F = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// 不同类型的枚举变量无法比较</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> e1: E.a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> e2: E.b = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// e1 === e2 这样的判断是不允许</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> e3: E.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">e1 === e3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> g1: G = G.b;</span><br><span class=\"line\"><span class=\"keyword\">let</span> g2: G.a = G.a; <span class=\"comment\">// 已经显示指定了 a 就只能赋给 G.a 的值</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"函数\">函数<a href=\"post/ts#函数\"></a></h3><p>在 ts 中形参和实参必须一一对应，不多不少，同时可选参数必须在必选参数之后。大部分的规则与 es6 类似不过是需要指定参数类型。</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 剩余参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add7</span>(<span class=\"params\">a: <span class=\"built_in\">number</span>, ...rest:<span class=\"built_in\">number</span>[]</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + rest.reduce(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> pre + cur);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 函数重载: 要先以一系列的函数定义声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add7</span>(<span class=\"params\">...rest: <span class=\"built_in\">number</span>[]</span>): <span class=\"title\">number</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add7</span>(<span class=\"params\">...rest: <span class=\"built_in\">string</span>[]</span>): <span class=\"title\">string</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add7</span>(<span class=\"params\">...rest: <span class=\"built_in\">any</span>[]</span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> first = rest[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> first === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rest.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (...)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"类\">类<a href=\"post/ts#类\"></a></h4><h5 id=\"继承和成员修饰符\">继承和成员修饰符<a href=\"post/ts#继承和成员修饰符\"></a></h5><p>类的定义大致与 es 类似，除了需要指定类型外，添加了成员修饰符 private\\public\\protect\\readonly\\static, 具体使用细则可以查看下文代码示例</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Dog &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// this.name = name;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 该构建函数既不能被实例化，也不能被继承</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    // 该构建函数不能被实例化，只能被继承</span><br><span class=\"line\">    protected <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    // 其中 name 形参添加了 public 后会为类自动添加对应的属性</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    name: string = 'dog';</span><br><span class=\"line\"></span><br><span class=\"line\">    // 只能在类内部或者子类内部访问，而不能被实例化后的对象访问</span><br><span class=\"line\">    protected name = 'dog';</span><br><span class=\"line\"></span><br><span class=\"line\">    // 只能在类的内部访问</span><br><span class=\"line\">    private name = 'dog';</span><br><span class=\"line\">    // 只能通过类名来调用，可以被继承被子类调用，不能通过实例化的对象访问</span><br><span class=\"line\">    static <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>)</span><br><span class=\"line\">    static run(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">    readonly pri: number = 0; // 无法被更改</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Husky extends Dog &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, <span class=\"keyword\">public</span> color: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        super(<span class=\"params\">name</span>);</span><br><span class=\"line\">        // this 要在 super 调用之后访问</span><br><span class=\"line\">        this.color = color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // color: string; 构建函数中使用了 public 后不需要再指明成员</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h5 id=\"抽象类与继承\">抽象类与继承<a href=\"post/ts#抽象类与继承\"></a></h5><p>所谓抽象类，就是只能被继承而不能被实例化的类。<br>所谓多态，在代码上的表现就是不同在子类在继承同一个父类后对同一个方法进行了不同的实现。</p>\n<ul>\n<li><p>抽象类</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">    eat() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'eat'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> Dog <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sleep() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'dog'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'ccc'</span>);</span><br><span class=\"line\">dog.eat();</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>多态</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Cat <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sleep() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'cat'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>实现方法的链式调用</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> WorkFlow &#123;</span><br><span class=\"line\">    step1() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    step2() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> WorkFlow().step1().step2();</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ul>\n<h5 id=\"泛型\">泛型<a href=\"post/ts#泛型\"></a></h5><ol>\n<li>概念<br>不预先确定的数据类型，具体的类型需要在使用时才能确定</li>\n<li>好处</li>\n</ol>\n<ul>\n<li>函数和类可以轻松的支持多种类型，增强程序的扩展性</li>\n<li>不必写多条函数重载，冗长的联合类型声明，增强代码可读性</li>\n<li>灵活控制类型之间的约束</li>\n</ul>\n<ol start=\"3\">\n<li>其他<br>泛型不能用于类的静态成员</li>\n<li>示例</li>\n</ol>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里的 T 就类似于 any 的作用，但是能保证输入和输出的类型一致</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">value: T</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log&lt;<span class=\"built_in\">string</span>[]&gt;([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Log = &lt;T&gt;<span class=\"function\">(<span class=\"params\">value: T</span>) =&gt;</span> T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Log &#123;</span><br><span class=\"line\">    &lt;T&gt;(value: T): T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 约束该类型的所有成员</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Log&lt;T&gt; &#123;</span><br><span class=\"line\">    (value: T): T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 需要指定 number 类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span>  myLog: Log&lt;<span class=\"built_in\">number</span>&gt; = log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给类型默认值</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Log&lt;T = string&gt; &#123;</span><br><span class=\"line\">    (value: T): T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span>  myLog: Log = log;</span><br></pre></td></tr></table></div></figure>\n\n<p>泛型约束</p>\n<figure class=\"highlight ts\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Length &#123;</span><br><span class=\"line\">    length: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> <span class=\"title\">Length</span>&gt;(<span class=\"params\">value: T</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value, value.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">log([<span class=\"number\">1</span>,<span class=\"number\">3</span>]);</span><br><span class=\"line\">log(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">log(&#123;length: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></div></figure>","prev":{"title":"关于 typescript 学习手记（二）接口声明","link":"post/post-1"},"next":{"title":"How I Learn Things Online (Way More Efficiently)——English Learning Weekly","link":"post/weekly"},"plink":"https://yanoo1497.github.io/post/ts/","toc":[{"title":"基本类型","id":"基本类型","index":"1","children":[{"title":"枚举类型","id":"枚举类型","index":"1.1"},{"title":"函数","id":"函数","index":"1.2","children":[{"title":"类","id":"类","index":"1.2.1"}]}]}]}