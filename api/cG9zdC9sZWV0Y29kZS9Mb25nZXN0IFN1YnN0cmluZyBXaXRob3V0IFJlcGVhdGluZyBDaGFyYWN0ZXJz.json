{"title":"无重复字符的最长子串","date":"2019-03-30T05:15:01.636Z","link":"post/leetcode/Longest Substring Without Repeating Characters","tags":["leedcode"],"updated":"2019-08-04T09:30:44.970Z","content":"<h1 id=\"无重复字符的最长子串\">无重复字符的最长子串<a href=\"post/leetcode/Longest Substring Without Repeating Characters#无重复字符的最长子串\"></a></h1><h2 id=\"题目\">题目<a href=\"post/leetcode/Longest Substring Without Repeating Characters#题目\"></a></h2><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>\n<p>示例 1:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;abcabcbb&quot;</span><br><span class=\"line\">输出: 3 </span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></div></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;bbbbb&quot;</span><br><span class=\"line\">输出: 1</span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></div></figure>\n\n<p>示例 3:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;pwwkew&quot;</span><br><span class=\"line\">输出: 3</span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class=\"line\">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></div></figure>\n\n<p>解答：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; s</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> index = temp.indexOf(s[i]);</span><br><span class=\"line\">        temp.push(s[i]);</span><br><span class=\"line\">         index !== <span class=\"number\">-1</span> &amp;&amp; (temp.splice(<span class=\"number\">0</span>, index + <span class=\"number\">1</span>));</span><br><span class=\"line\">        result = <span class=\"built_in\">Math</span>.max(result, temp.length)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>时间复杂度： O(n)</p>\n<p>思路：<br>循环遍历传入的字符串，用一个临时数组存储获取到的子串，用一个变量存储当前不重复子串的最大值。遍历的过程中，如果当前字符与临时数组里没有重复的，就将该字符存入临时数组，同时更新变量取两者的最大值；如果当前字符与临时数组有重复的，记录当前位置，临时数组需要把重复的位置之前的数据都扔掉，继续循环。这样变量里存储的一直是字串的最大值。</p>\n","prev":{"title":"两数之和","link":"post/leetcode/twosum"},"next":{"title":"《css世界》书摘","link":"post/css/css世界"},"plink":"https://yanoo1497.github.io/blog/post/leetcode/Longest Substring Without Repeating Characters/","toc":[{"title":"无重复字符的最长子串","id":"无重复字符的最长子串","index":"1","children":[{"title":"题目","id":"题目","index":"1.1"}]}]}