{"title":"CSS 优化细则","date":"2019-03-30T05:15:01.569Z","link":"post/css/css优化细则","tags":["css"],"updated":"2019-08-04T10:53:54.161Z","content":"<h1 id=\"CSS-优化细则\">CSS 优化细则<a href=\"post/css/css优化细则#CSS-优化细则\"></a></h1><ul>\n<li>慎重使用高性属性：浮动、定位； </li>\n<li>去除空规则； </li>\n<li>属性值为0时，不加单位； </li>\n<li>属性值为浮点数0.**时，可以省略小数点前的0； </li>\n<li>标准化各种浏览器前缀，带浏览器前缀的在前，标准的在后； </li>\n<li>不使用@import前缀，它会影响css加载速度； </li>\n<li>充分利用css继承属性，减少代码量； </li>\n<li>抽象提取公用样式，减少代码量； </li>\n<li>选择器优化嵌套，尽量避免层级过深； </li>\n<li>将css文件放在页面的最上面；</li>\n<li>避免使用复杂的选择器，层级越少越好　　</li>\n</ul>\n<p>有时候项目的模块越来越多，功能越来越复杂，我们写的CSS选择器会内套多层，越来越复杂。　　</p>\n<p>建议选择器的嵌套最好不要超过三层，比如：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.header .logo .text&#123;&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>　<br>可以优化成</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.haeder .logo-text&#123;&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>简洁的选择器不仅可以减少css文件大小，提高页面的加载性能，浏览器解析时也会更加高效，也会提高开发人员的开发效率，降低了维护成本。</p>\n<p>5、利用CSS继承减少代码量　　我们知道有一部分CSS代码是可以继承的，如果父元素已经设置了该样式，子元素就不需要去设置该样式，这个也是提高性能的行之有效的方法。　　</p>\n<p>常见的可以继承的属性比如：　　color，font-size，font-family等等　　</p>\n<p>不可继承的比如：　　position，display，float等</p>\n<p><strong>关于CSS方法论</strong></p>\n","prev":{"title":"sass学习笔记","link":"post/css/sass/sass学习笔记"},"plink":"https://yanoo1497.github.io/blog/post/css/css优化细则/","toc":[{"title":"CSS 优化细则","id":"CSS-优化细则","index":"1"}]}