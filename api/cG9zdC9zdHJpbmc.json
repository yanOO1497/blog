{"title":"几种字符串匹配算法","date":"2020-02-07T06:32:22.000Z","link":"post/string","tags":["algorithm"],"categories":["algorithm"],"updated":"2020-02-12T15:49:13.892Z","content":"<p>通常在使用 JS 时，匹配字符串都可以通过现有接口比如是 indexOf() 来直接使用，但是了解一下底层的实现原理还是很有必要的，这篇文章介绍了常见的几种字符串匹配算法，主要是涉及主串 A 中匹配子串 B 的不同解法思路。</p>\n<h2 id=\"BF-Brute-Force-算法\">BF(Brute Force) 算法<a href=\"post/string#BF-Brute-Force-算法\"></a></h2><ul>\n<li><p>介绍：在主串中，检查起始位置分别是 0、1、2…n-m 且长度为 m 的 n-m+1 个子串，看有没有跟模式串匹配的，匹配方式就是逐一比对过去，在每一个起始位置逐一比对下去。</p>\n</li>\n<li><p>优点：简单，不易出错，符合 KISS 原则</p>\n</li>\n<li><p>缺点：暴力解法，最坏情况下的时间复杂度为 O(n*m)</p>\n</li>\n<li><p>应用场景：在字符串比较短时，不失为一个不错的选择</p>\n</li>\n</ul>\n<h2 id=\"RK-Rabin-Karp-算法\">RK(Rabin-Karp) 算法<a href=\"post/string#RK-Rabin-Karp-算法\"></a></h2><ul>\n<li><p>介绍：其实就是 BF 算法的升级版，BF 方法的基础上，改进了判断是否匹配的算法。在 BF 算法中，匹配方式是采用逐一字符串匹配的方式，如果使用模式串的哈希值来比对判断就会大大提高匹配的速度。在哈希算法合理的情况下（暂不考虑哈希冲突），此算法的复杂度就是 O(n)。</p>\n<p>  所以此方法的优化点主要在于哈希算法的设计上，具体就需要看根据具体需要匹配的字符串的规律了。例如如果是纯字母的话，可以转 26 进制、取字符相加的值等。当然，如果遇到哈希冲突时一样需要退化使用最原始的逐字符比对的方式。</p>\n</li>\n<li><p>优点：理解简单，容易维护</p>\n</li>\n<li><p>缺点：依赖于哈希算法的设计，如果设计不好冲突多或者计算复杂的话反而会提高复杂度。</p>\n</li>\n</ul>\n<h2 id=\"BM-Boyer-Moore-算法\">BM(Boyer-Moore) 算法<a href=\"post/string#BM-Boyer-Moore-算法\"></a></h2><ul>\n<li>介绍：BM算法的核心思想是通过将模式串沿着主串大踏步的向后滑动，从而大大减少比较次数，降低时间复杂度。而算法的关键在于如何兼顾步子迈得足够大与无遗漏，同时要尽量提高执行效率。这就需要模式串在向后滑动时，遵守坏字符规则与好后缀规则，同时采用一些技巧。<br>  具体细节理解可以参考</li>\n<li>优点：有实验表明它的性能是著名的 KMP 算法的 3 到 4 倍。</li>\n<li>缺点：不是太好理解，代码变复杂，不利于维护</li>\n</ul>\n<h2 id=\"KPM-算法\">KPM 算法<a href=\"post/string#KPM-算法\"></a></h2><ul>\n<li>介绍：时间复杂度是 O(n+m),…待更新</li>\n</ul>\n<p>参考文章：</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653201142&idx=1&sn=8cac1bbcfdb94474f0cc3855705cc253&chksm=8c99d02cbbee593ae0fb7fa1c8c610e7c1f57009e0c0ecbe19d07f60951912c915bce65c8619&mpshare=1&scene=24&srcid=&sharer_sharetime=1581059138277&sharer_shareid=c81db93c7d619ae3bc826d4b29004a4c&key=d0cbbe752e25cfead93636f5c51c0dd79a563685023313898118996a900912e3e5759597092869611e9225a1497cb7a8904112d8060bb730c6ea4ab7a91458c1ee5636d1fda12a34923f0cde40cc96c0&ascene=14&uin=ODQ4NDkyOTA5&devicetype=Windows+10&version=6208006f&lang=zh_CN&exportkey=A%2B4m6FNm7W7x%2FoHIuTlTPWU%3D&pass_ticket=9AeFM2z2ge96kzWDord9a6a9hgIr0YZrvA0A1x6xGwi4OYUMqGDj6aDzuy6wVGfk\" target=\"_blank\" rel=\"noopener\">漫画：什么是字符串匹配算法？</a>（通俗易懂）</li>\n</ul>\n","prev":{"title":"算法系列 —— 二分查找","link":"post/binary-search"},"next":{"title":"2010 春节周记","link":"post/weekly"},"plink":"https://yanoo1497.github.io/post/string/","toc":[{"title":"BF(Brute Force) 算法","id":"BF-Brute-Force-算法","index":"1"},{"title":"RK(Rabin-Karp) 算法","id":"RK-Rabin-Karp-算法","index":"2"},{"title":"BM(Boyer-Moore) 算法","id":"BM-Boyer-Moore-算法","index":"3"},{"title":"KPM 算法","id":"KPM-算法","index":"4"}]}