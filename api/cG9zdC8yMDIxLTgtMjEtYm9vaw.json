{"title":"《黑客与画家》书摘","date":"2021-08-22T06:32:22.000Z","link":"post/2021-8-21-book","tags":["book"],"updated":"2021-10-10T10:01:17.977Z","content":"<blockquote>\n<p>有些观点思想还是很有前瞻性的，中间有一些分析特定语言的不清楚的会有些乏味，其他的推荐看看~</p>\n</blockquote>\n<h2 id=\"为什么书呆子不受欢迎\">为什么书呆子不受欢迎<a href=\"post/2021-8-21-book#为什么书呆子不受欢迎\"></a></h2><p>青少年在心理上还没有摆脱儿童状态，许多人都会残忍地对待他人。他们折磨书呆子的原因就像拔掉一条蜘蛛腿一样，觉得很好玩。在一个人产生良知之前，折磨就是一种娱乐。孩子们欺负书呆子的另一个原因是为了让自己感到好受一些。当你踩水的时候，你把水踩下去，你的身体就会被托起来。同样，在任何社会等级制度中，那些对自己没自信的人就会通过虐待他们眼中的下等人来突显自己的身份。我已经意识到，正是因为这个原因，在美国社会中底层白人是对待黑人最残酷的群体。</p>\n<p>这就好比一个政客，他想让选民忘记糟糕的国内局势，方法就是为国家找出一个敌人，哪怕敌人并不真的存在，他也可以创造一个出来。一群人在一起，挑出一个书呆子，居高临下地欺负他，就会把彼此联系起来。一起攻击一个外人，所有人因此就都成了自己人。这就是为什么最恶劣的以强凌弱的事件都与团体有关的原因。随便找一个书呆子，他都会告诉你，一群人的虐待比一个人的虐待残酷得多。</p>\n<p>最受欢迎的孩子并不欺负书呆子，他们不需要靠踩在书呆子身上来垫高自己。大部分的欺负来自处于下一等级的学生，那些焦虑的中间层。<br>不受欢迎是一种传染病，虽然善良的孩子不会去欺负书呆子，但是为了保护自己，也依然会与书呆子保持距离。<br>14岁的孩子开始抽大麻，并不是因为他们听说这样有助于忘记烦恼，而是因为他们想要加入一个不同的团体。</p>\n<h2 id=\"黑客与画家\">黑客与画家<a href=\"post/2021-8-21-book#黑客与画家\"></a></h2><p>创造优美事物的方式往往不是从头做起，而是在现有成果的基础上做一些小小的调整，或者将已有的观点用比较新的方式组合起来。这种类型的工作很难用研究性的论文表达。<br>塞缪尔·约翰逊[插图]说过，人们对一个作家的评价，需要100年才能达成一致[插图]。你必须先等他的那些有影响力的朋友都死了，然后再等他的追随者都死了，才能对他有一个公正的评价。</p>\n<p>我现在认为，大学里教给我的编程方法都是错的。你把整个程序想清楚的时间点，应该是在编写代码的同时，而不是在编写代码之前，这与作家、画家和建筑师的做法完全一样。明白这一点对软件设计有重大影响。它意味着，编程语言首要的特性应该是允许动态扩展（malleable）。编程语言是用来帮助思考程序的，而不是用来表达你已经想好的程序。它应该是一支铅笔，而不是一支钢笔。</p>\n<p>我们需要的是一种可以随意涂抹、擦擦改改的语言，我们不想正襟危坐，把一个盛满各种变量类型的茶杯，小心翼翼放在自己的膝盖上，为了与一丝不苟的编译器大婶交谈，努力地挑选词语，确保变量类型匹配，好让自己显得礼貌又周到。</p>\n<p>大公司为了避免设计上的灾难，选择了减少设计结果的标准差。但是当你排斥差异的时候，你不仅将失败的可能性排除在外，也将获得高利润的可能性排除在外。这对大公司来说不是问题，因为生产特别优秀的产品不是它们的获胜手段。大公司只要做到不太烂，就能赢。所以，如果你的竞争优势是在软件设计方面，并且你的对手是一家大公司，它大到由一群产品经理来设计软件，那么你的对手将永远无法赶上你。</p>\n<p>真正竞争软件设计的战场是新兴领域的市场，这里还没有人建立过防御工事。只要你能做出大胆的设计，由一个人或一批人同时负责设计和实现产品，你就能在这里战胜大公司<br>眼下想必每个人都知道，过早优化（premature optimization）是一件危险的事情。我认为，我们应该对“过早设计”（premature design）也抱有同样的担忧，不要太早决定一个程序应该怎么做。</p>\n<p><strong>如果黑客只是一个负责实现领导意志的技术工人，职责就是根据规格说明书写出代码，那么他其实与一个挖水沟的工人是一样的，从这头挖到那头，仅此而已。但是，如果黑客是一个创作者，他从事的就不是机械性的工作，他必须具备灵感。</strong></p>\n<p>从他人的角度思考问题正是成功的奥秘所在。<strong>“换位思考”并不就意味着你要做自我牺牲。实际上，这是完全不同的两回事。了解别人对于事情的看法，并不代表你为他的利益服务。某些情况下，比如打仗的时候，了解对手正是为了打击对手</strong>[插图]。</p>\n<h2 id=\"守口如瓶\">守口如瓶<a href=\"post/2021-8-21-book#守口如瓶\"></a></h2><p><strong>“守口如瓶”的真正缺点在于，你从此无法享受讨论带来的好处了。讨论一个观点会产生更多的观点，不讨论就什么观点也没有</strong>。所以，如果可能的话，你最好找一些信得过的知己，只与他们畅所欲言、无所不谈。这样不仅可以获得新观点，还可以用来选择朋友。能够一起谈论“异端邪说”并且不会因此气急败坏的人，就是你最应该认识的朋友。</p>\n<h2 id=\"永远质疑\">永远质疑<a href=\"post/2021-8-21-book#永远质疑\"></a></h2><p>想要摆脱你自己的时代的流行，需要一点自觉。没有了时间所产生的距离，你不得不自己创造距离。你不要让自己成为人群的一分子，而要尽可能地远离人群，观察正在发生的事情，特别注意那些被压制的思想观点。<br>如果自己就是潮水的一部分，怎么能看见潮流的方向呢？你只能永远保持质疑。问自己，什么话是我不能说的？为什么？</p>\n<h2 id=\"良好的坏习惯\">良好的坏习惯<a href=\"post/2021-8-21-book#良好的坏习惯\"></a></h2><p>最新的版权法设置了前所未有的障碍，禁止外部人员了解专有技术的内部细节，从而也就禁止了外部人员从这个途径产生新构想。<br>一个人们拥有言论自由和行动自由的社会，往往最有可能采纳最优方案，而不是采纳最有权势的人提出的方案。<br>人们惊慌失措时采取的措施到头来产生了适得其反的效果。</p>\n<h2 id=\"全身心投入\">全身心投入<a href=\"post/2021-8-21-book#全身心投入\"></a></h2><p>Viaweb 和其他许多软件公司一样，大部分代码都有明确的负责人，而且只有一个。如果你负责某件事，那就真的是你负责。除了你以外，没有人能批准（他们甚至都不知道）这部分代码的发布。如果你出错了，没有人会提醒你，唯一的代码保护机制就是你的羞耻心，你不想被同事当成傻瓜，这就足矣。<br>提高软件可靠性的关键在于开发时全神贯注，而不是降低开发速度。<br>这样写软件也有局限。它适用于小型的、由优秀可靠程序员组成的开发团队，不适用于大型的、充斥大量平庸之辈的软件公司，在那里不是程序员想出好的构思，而是一个委员会集体批准坏的构思。</p>\n<h2 id=\"关注用户\">关注用户<a href=\"post/2021-8-21-book#关注用户\"></a></h2><p>如果你亲眼见到某人第一次使用你的软件，你就会知道软件的哪个地方最打动他。</p>\n<h2 id=\"金钱问题\">金钱问题<a href=\"post/2021-8-21-book#金钱问题\"></a></h2><p>一定数量的盗版对软件公司是有好处的。不管你的软件定价多少，有些用户永远都不会购买。如果这样的用户使用盗版，你并没有任何损失。事实上，你反而赚到了，因为你的软件现在多了一个用户，市场影响力就更大了一些，而这个用户可能毕业以后就会出钱购买你的软件。</p>\n<h2 id=\"目标客户\">目标客户<a href=\"post/2021-8-21-book#目标客户\"></a></h2><p>有钱的客户倾向于更贵的选择，即使便宜的选择更符合他们的需要，他们也不会买。这种现象普遍存在。原因就是，那些索要高价的人将更多的钱投入推销。</p>\n<h2 id=\"手工艺人\">手工艺人<a href=\"post/2021-8-21-book#手工艺人\"></a></h2><p>我们这个世界，你向下沉沦或者向上奋进都取决于你自己，不能把原因推给外界。</p>\n<h2 id=\"高科技-可放大性\">高科技=可放大性<a href=\"post/2021-8-21-book#高科技-可放大性\"></a></h2><p>技术就是某种手段，就是我们做事的方式。如果你发现了一种做事的新方式，它的经济价值就取决于有多少人使用这种新方式。技术就是钓鱼的鱼竿，而不是那条鱼。<br>假定软件有两个候选的新功能，它们创造的商业价值完全相同，那么我们总是选择较困难的那个功能。不是因为这个功能能带来更多的收入，而是因为它比较难。我们很乐于迫使那些又大又慢的竞争对手跟着我们一起走进沼泽地。创业公司就像游击队一样，喜欢选择不易生存的深山老林作为根据地，政府的正规军无法追到那种地方。我还记得创业初期我们是多么筋疲力尽，整天都为一些可怕的技术难题绞尽脑汁。但是，我还是感到相当高兴，因为那些问题连我们都觉得这么困难，那么竞争对手就更会认为是不可能解决的。<br>进入壁垒（barriers to entry）。如果你有一个新点子去找VC，问他是否投资，他首先就会问你几个问题，其中之一就是其他人复制你的模式是否很困难。也就是说，你为竞争对手设置的壁垒有多高。[插图]你最好做出令人信服的解释，阐明你的技术难以复制的原因。否则一旦大公司看到了，它们就会做出自己的版本，再加上它们的品牌、资本、经销能力，一夜之间就把你的市场全部抢走。那时你就像来到开阔地带的游击队，会被正规军一举歼灭。<br>俗话说得好，最好的防御就是进攻。如果你开发出来的技术是竞争对手难于复制的，那就够了，你不需要依靠其他防御手段了。一开始就选择较难的问题，此后的各种决策都选择较难的那个选项。</p>\n<h2 id=\"潜规则\">潜规则<a href=\"post/2021-8-21-book#潜规则\"></a></h2><p>一家大到有能力收购其他公司的公司必然也是一家大到变得很保守的公司，而这些公司内部负责收购的人又比其他人更保守，因为他们多半是从商学院毕业的，没有经历过公司的创业期。他们宁愿花大钱做更安全的选择，所以向他们出售一家已经成功的创业公司要比出售还处在早期阶段的创业公司更容易，即使会让他们付出多得多的价码。</p>\n<h2 id=\"用户数量\">用户数量<a href=\"post/2021-8-21-book#用户数量\"></a></h2><p><strong>大多数时候，促成买方掏钱的最好办法不是让买家看到有获利的可能，而是让他们感到失去机会的恐惧。</strong>对于买家来说，最强的收购动机就是看到竞争对手可能收购你。我们发现这会使得CEO们连夜行动。次强的动机则是让他们担心如果现在不买你，你的高速成长将使得未来的收购耗资巨大，甚至你本身可能变成一个他们的竞争对手。</p>\n<p>风险投资商有一张清单，上面写满了各种表示不应该收购的危险信号。排在榜首的信号中有一个就是公司由技术顽童掌控，只想解决有趣的技术问题，不考虑用户的需要。你开办创业公司不是单纯地为了解决问题，而是为了解决那些用户关心的问题。<br>尽快拿出1.0版，然后根据用户的反映而不是自己的猜测进行软件优化。<br>你必须时刻牢记的最基本的原则就是，创造人们需要的东西，也就是创造财富。</p>\n<h2 id=\"财富和权力\">财富和权力<a href=\"post/2021-8-21-book#财富和权力\"></a></h2><p>只有在快速获得巨大利益的激励下，你才会去挑战那些困难的问题，否则你根本不愿意去碰它们。</p>\n<h2 id=\"偷窃\">偷窃<a href=\"post/2021-8-21-book#偷窃\"></a></h2><p>在控制程度更高的社会，统治者和官僚阶层用税收代替直接充公。但是，根本的一点并没有变，那就是致富的方法不是创造财富，而是以统治者的强权进行搜刮掠夺。</p>\n<h2 id=\"公理的不同意见\">公理的不同意见<a href=\"post/2021-8-21-book#公理的不同意见\"></a></h2><ul>\n<li><p>只要你压制收入差距的扩大，不管是用偷窃私人财产的做法（封建社会），还是用高额税收的做法（某些现代政府），最终结果看来都是一样的，那就是社会作为一个整体变得更贫穷了。</p>\n</li>\n<li><p>总的来说，你要避免的是绝对贫穷，而不是相对贫穷。如果必须在这两种社会之间做选择，根据目前的证据，我选择个人相对贫穷、但是整体上更富裕的社会。一个社会需要有富人，这主要不是因为你需要富人的支出创造就业机会，而是因为他们在致富过程做出的事情。</p>\n</li>\n</ul>\n<h2 id=\"防止垃圾邮件的一种方法\">防止垃圾邮件的一种方法<a href=\"post/2021-8-21-book#防止垃圾邮件的一种方法\"></a></h2><p>如今的大多数垃圾邮件过滤器就像杀虫剂一样，唯一作用就是创造出杀不死的新品种害虫。</p>\n<h2 id=\"设计者的品味\">设计者的品味<a href=\"post/2021-8-21-book#设计者的品味\"></a></h2><p>喜欢一件东西，却不知道为什么自己喜欢它，原因可能是这件东西是美的，但也可能因为他们的母亲也拥有同样的东西，或者杂志上某个明星使用它，或者仅仅因为它的价格很昂贵。人类的思想就是没有经过整理的无数杂念的混合。</p>\n<p>大人教导你说品味只是每个人的偏好而已。但是来到博物馆，他们却对你说，仔细观赏达·芬奇的作品，因为他是伟大的艺术家，品味超凡。</p>\n<p>把品味说成个人的偏好可以有效地杜绝争论，防止人们争执哪一种品味更好。但是问题是，这种说法是不正确的。只要你自己开始动手设计东西，就能明白这一点。</p>\n<p>如果品味只是一种个人偏好，那么每个人都是完美无缺的：你喜欢自己看上的东西，那就足够了。就像别的工作一样，只要你不断地从事设计工作，你就会做得越来越好。你的品味会出现变化，你会像别人一样有所提高。如果这样的话，那么你以前的品味就不只是与现在不同，而是不如现在的好。因此，所谓的“品味没有好坏之分”的公理也就顿时见鬼去了。现在流行“相对主义”，即认为真理是相对的。即使你已经从小孩变成了成年人，这种观点依然可能妨碍你思考“品味”。但是，只要你走出狭隘的自我，至少在心里对自己说，确实存在比其他设计更好的杰出设计，那么你就能开始仔细研究了。你的品味是如何变化的？什么原因使你做出不好的设计？其他人对设计是什么观点？只要你开始思考这些问题，你就会发现，众多不同学科对“美”的认识有着惊人的相似度。优秀设计的原则是许多学科的共同原则，一再反复地出现。</p>\n<p>当你被迫把东西做得很简单时，你就被迫直接面对真正的问题。当你不能用表面的装饰交差时，你就不得不做好真正的本质部分。<br>如果一件东西长盛不衰，那么它的吸引力一定来自本身的魅力，而不是来自风潮的影响。</p>\n<p><strong>好设计是启发性的设计</strong></p>\n<p>一幢好的建筑物应该可以充当平台，让你想怎么布置就可以怎么布置，过上自己想过的家庭生活，而不是使得你像执行程序一样只能过上建筑师为你安排的生活。</p>\n<p>在软件业中，这条原则意味着，你应该为用户提供一些基本模块，使得他们可以随心所欲自由组合，就像玩乐高积木那样。</p>\n<p>幽默一定程度上反映了力量。幽默感是强壮的一种表现，始终拥有幽默感就代表你对厄运一笑了之，而丧失幽默感则表示你被厄运深深伤到。所以，强壮的标志（或者至少是特点）就是轻松面对自己的人生。充满自信的人常常像燕子一样，以一种居高临下的姿态轻盈地看待周围的一切</p>\n<p><strong>并非所有的痛苦都是有益的。世界上有有益的痛苦，也有无益的痛苦。你需要的是咬牙向前冲刺的痛苦，而不是脚被钉子扎破的痛苦。</strong></p>\n<p>好设计是看似容易的设计。优秀运动员比赛时，让人觉得他轻轻松松就获胜了，优秀设计师也是如此，他们的工作看上去很容易。大多数时候，这是一种错觉。作家的文章读起来流畅自如，但是背后其实经过了反复修改。</p>\n<p>好设计是一种再设计。很少有人一次就把事情做对。专家的做法是先完成一个早期原型，然后提出修改计划，最后把早期原型扔掉。</p>\n<p>唯一达到“奇特”的方法，就是追求做出好作品，完成之后再回过头看。</p>\n<p><strong>推动人才成批涌现的最大因素就是，让有天赋的人聚在一起，共同解决某个难题。互相激励比天赋更重要，达·芬奇之所以成为达·芬奇，主要原因不仅仅是他的天赋，更重要的是他生活在当时的佛罗伦萨，而不是米兰。</strong></p>\n<h2 id=\"语言的战争\">语言的战争<a href=\"post/2021-8-21-book#语言的战争\"></a></h2><p>如果你长期使用某种语言，你就会慢慢按照这种语言的思维模式进行思考。所以，后来当你遇到其他任何一种有重大差异的语言，即使那种语言本身并没有任何不对的地方，你也会觉得它极其难用。缺乏经验的程序员对于各种语言优缺点的判断经常被这种心态误导。</p>\n<h2 id=\"一百年后的编程语言\">一百年后的编程语言<a href=\"post/2021-8-21-book#一百年后的编程语言\"></a></h2><p>效率低下的软件并不等于很烂的软件。一种让程序员做无用功的语言才真正称得上很烂。浪费程序员的时间而不是浪费机器的时间才是真正的无效率。随着计算机速度越来越快，这会变得越来越明显。</p>\n<h2 id=\"秘密武器\">秘密武器<a href=\"post/2021-8-21-book#秘密武器\"></a></h2><p>在竞争中，你的对手无法理解你的技术优势，这可是再宝贵不过了。商场如战场，对手摸不透你，你的胜算就增加了。</p>\n<h2 id=\"Blub困境\">Blub困境<a href=\"post/2021-8-21-book#Blub困境\"></a></h2><p>编程语言不仅仅是技术，也是一种习惯性思维，非常难于改变</p>\n<h2 id=\"创业公司的合气道\">创业公司的合气道<a href=\"post/2021-8-21-book#创业公司的合气道\"></a></h2><p>如果你为创业公司工作，那么这里有一个评估竞争对手的妙招——关注他们的招聘职位。他们网站上的其他内容无非是一些陈腐的照片和夸夸其谈的文字，但是招聘职位却不得不写得很明确，反映出他们到底想干什么，否则就会引来一大批不合适的求职者。</p>\n<h2 id=\"书呆子的复仇\">书呆子的复仇<a href=\"post/2021-8-21-book#书呆子的复仇\"></a></h2><p>那些经理奇迹般地同时具备了两种很常见但很难结合在一起的特点：（a）对技术一无所知；（b）对技术有强烈的个人观点。</p>\n<h2 id=\"朝着数学的方法发展\">朝着数学的方法发展<a href=\"post/2021-8-21-book#朝着数学的方法发展\"></a></h2><p>简单说，因为这种语言本质上不是一种技术，而是数学。数学是不会过时的。</p>\n<h2 id=\"向心力\">向心力<a href=\"post/2021-8-21-book#向心力\"></a></h2><p>如果你创业的话，千万不要为了取悦风险投资商或潜在并购方而设计你的产品。让用户感到满意才是你的设计方向。只要赢得用户，其他事情就会接踵而来。如果没有用户，谁会关心你选择的“正统”技术是多么令人放心。</p>\n<h2 id=\"一个诀窍\">一个诀窍<a href=\"post/2021-8-21-book#一个诀窍\"></a></h2><p>他真正关心的是不承担决策失败的责任。所以对他个人来说，最安全的做法就是跟随大多数人的选择。</p>\n<p>在大型组织内部，有一个专门的术语描述这种跟随大多数人的选择的做法，叫做“业界最佳实践”。这个词出现的原因其实就是为了让你的经理可以推卸责任。既然我选择的是“业界最佳实践”，如果不成功，项目失败了，那么你也无法指责我，因为做出选择的人不是我，而是整个“业界”。</p>\n<p>技术本来就应该是尖端的。正如伊拉恩·加内特所说，编程语言的所谓“业界最佳实践”，实际上不会让你变成最佳，只会让你变得很平常。如果你选择的编程语言使得你开发软件的速度只有（选择更激进技术的）对手的几分之一，那么“最佳实践”真的起错了名字。</p>\n<h2 id=\"时间\">时间<a href=\"post/2021-8-21-book#时间\"></a></h2><p>我有一个朋友，他的客户第一次提出某种需求时，他很少理会。因为他知道人们有时候会想要自己并不真正需要的东西。为了避免浪费时间，只有当客户第三次或第四次提出同样的需求时，他才认真对待。这个时候客户可能已经很不高兴了，但是这至少保证他们提出的需求应该就是他们真正需要的东西。</p>\n<p>人们真正注意到你的时候，不是第一眼看到你站在那里，而是发现过了这么久你居然还在那里。</p>\n<h2 id=\"再设计\">再设计<a href=\"post/2021-8-21-book#再设计\"></a></h2><p>设计一样东西，最重要的一点就是要经常“再设计”，编程尤其如此，再多的修改都不过分。</p>\n<p>你必须对解决难题的可能性保持乐观，同时对当前解法的合理性保持怀疑。</p>\n<p>如果你能平衡好希望和担忧，它们就会推动项目前进，就像自行车在保持平衡中前进一样。在创新活动的第一阶段，你不知疲倦地猛攻某个难题，自信一定能够解决它。到了第二阶段，你在清晨的寒风中看到自己已经完成的部分，清楚地意识到存在各种各样的缺陷。此时，只要你对自己的怀疑没有超过你对自己的信心，就能够坦然接受这个半成品，心想不管多难我还是可以把剩下的部分做完。</p>\n<p>用户是一把双刃剑。他们推动语言的发展，但也使得你不敢对语言进行大规模改造。所以，一开始的时候要精心选择用户，避免使用者过快增长。发展用户就像一种优化过程，明智的做法就是放慢速度。一般情况下，用户比较少意味着你任何时候都可以加大修改的力度。这时，对语言规格做出改变就像撕绷带，当你感到痛苦的一瞬间，痛苦就已经成为了回忆。如果用户数量庞大，修改语言带来的痛苦就将持续很长时间。</p>\n<h2 id=\"设计与研究\">设计与研究<a href=\"post/2021-8-21-book#设计与研究\"></a></h2><p><strong>设计与研究的区别看来就在于，前者追求“好”（good），后者追求“新”（new）。优秀的设计不一定很“新”，但必须是“好”的；优秀的研究不一定很“好”，但必须是“新”的。我认为这两条道路最后会发生交叉：只有应用“新”的创意和理论，才会诞生超越前人的最佳设计；只有解决那些值得解决的难题（也就是“好”的难题），才会诞生最佳研究。所以，最终来说，设计和研究都通向同一个地方，只是前进的路线不同罢了。</strong></p>\n<p><strong>让用户满意并不等于迎合用户的一切要求。用户不了解所有可能的选择，也经常弄错自己真正想要的东西。做一个好的设计师就像做一个好医生一样。你不能头痛医头，脚痛医脚。病人告诉你症状，你必须找出他生病的真正原因，然后针对病因进行治疗。</strong></p>\n<p>一种人眼里的优秀设计可能在另一种人眼里却是糟糕无比。这里的重点是你必须选出某些人作为你的目标用户。我觉得，<strong>除非设定目标用户，否则一种设计的好坏根本无从谈起。</strong></p>\n<p>如果你觉得自己在为傻瓜设计产品，那么很可能不仅无法设计出优秀产品，而且就连傻瓜也不喜欢你的设计。</p>\n<p>最后写出来的程序就像已经完成的数学证明一样，是一棵经过精心修剪的树木，上面杂乱滋生的树杈都已经被剪去了。所以，评价一种语言的优劣不能简单地看最后的程序是否表达得很漂亮，而要看程序从无到有的那条完成路径是否很漂亮。</p>\n<p><strong>我们常常采用错误的方法评价编程语言，只看一眼最后完成的程序就做出判断。同一个软件有两种不同语言开发的版本，你发现其中一个版本比另一个版本短得多，于是非常自信地认定前者的编程语言比后者的更好。但是，如果你从艺术创作的角度思考这个问题，就不太可能这样评价编程语言。因为你不想最后只剩下一种像大理石那样漂亮、又像大理石那样难用的编程语言。</strong></p>\n<p>为了做出优秀的设计，你必须贴近用户，始终寸步不离，永远站在用户的角度调整自己的构想</p>\n<p>以绘画为例，文艺复兴时期就有人发现了这一点。如今，几乎所有的美术老师都会告诉你准确画出一个事物的方法，不是沿着轮廓慢慢一个部分、一个部分地把它画出来，因为这样的话各个部分的错误会累积起来，最终导致整幅画失真。你真正应该采用的方法是快速地用几根线画出一个大致准确的轮廓，然后再逐步地加工草稿。</p>\n<p>画一个草图，然后再逐步加工。如果你采用这种方式，那么从理论上说，你每天收工的时候都可以看到整体的效果，不会对最后的成品一点感觉都没有。跟你说实话吧，画家之间甚至流传着一句谚语：“画作永远没有完工的一天，你只是不再画下去而已。”这种情况对于第一线的程序员真是再熟悉不过了。</p>\n","prev":{"title":"JS 执行字符串代码片段方案","link":"post/eval-string"},"next":{"title":"相同文件压缩后 HASH 值（MD5）大概率不相同解决方案","link":"post/zip"},"plink":"https://yanoo1497.github.io/post/2021-8-21-book/","toc":[{"title":"为什么书呆子不受欢迎","id":"为什么书呆子不受欢迎","index":"1"},{"title":"黑客与画家","id":"黑客与画家","index":"2"},{"title":"守口如瓶","id":"守口如瓶","index":"3"},{"title":"永远质疑","id":"永远质疑","index":"4"},{"title":"良好的坏习惯","id":"良好的坏习惯","index":"5"},{"title":"全身心投入","id":"全身心投入","index":"6"},{"title":"关注用户","id":"关注用户","index":"7"},{"title":"金钱问题","id":"金钱问题","index":"8"},{"title":"目标客户","id":"目标客户","index":"9"},{"title":"手工艺人","id":"手工艺人","index":"10"},{"title":"高科技=可放大性","id":"高科技-可放大性","index":"11"},{"title":"潜规则","id":"潜规则","index":"12"},{"title":"用户数量","id":"用户数量","index":"13"},{"title":"财富和权力","id":"财富和权力","index":"14"},{"title":"偷窃","id":"偷窃","index":"15"},{"title":"公理的不同意见","id":"公理的不同意见","index":"16"},{"title":"防止垃圾邮件的一种方法","id":"防止垃圾邮件的一种方法","index":"17"},{"title":"设计者的品味","id":"设计者的品味","index":"18"},{"title":"语言的战争","id":"语言的战争","index":"19"},{"title":"一百年后的编程语言","id":"一百年后的编程语言","index":"20"},{"title":"秘密武器","id":"秘密武器","index":"21"},{"title":"Blub困境","id":"Blub困境","index":"22"},{"title":"创业公司的合气道","id":"创业公司的合气道","index":"23"},{"title":"书呆子的复仇","id":"书呆子的复仇","index":"24"},{"title":"朝着数学的方法发展","id":"朝着数学的方法发展","index":"25"},{"title":"向心力","id":"向心力","index":"26"},{"title":"一个诀窍","id":"一个诀窍","index":"27"},{"title":"时间","id":"时间","index":"28"},{"title":"再设计","id":"再设计","index":"29"},{"title":"设计与研究","id":"设计与研究","index":"30"}]}