{"title":"JS 原型链速记总结","date":"2020-02-16T07:32:22.000Z","link":"post/prototype","tags":["javascript"],"categories":["javascript"],"updated":"2021-06-12T10:38:29.429Z","content":"<blockquote>\n<p>主要是为了方便自己遗忘时的一份简洁的速记列表，截取自文章：<a href=\"https://blog.csdn.net/cc18868876837/article/details/81211729\" target=\"_blank\" rel=\"noopener\">帮你彻底搞懂JS中的prototype、<strong>proto</strong>与constructor（图解）</a></p>\n</blockquote>\n<p>代码示例辅助讲解</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;...&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> f1 = <span class=\"keyword\">new</span> Foo();</span><br></pre></td></tr></table></div></figure>\n\n<p>记录图：<br><img src=\"https://img-blog.csdnimg.cn/20190311194017886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NjMTg4Njg4NzY4Mzc=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"原型链\"></p>\n<p>图解关键记忆点：</p>\n<ul>\n<li><p><code>__proto__</code> 和 <code>constructor</code> 属性是<strong>对象</strong>所独有的；</p>\n<p>  <code>__proto__</code>属性都是由一个对象指向它的原型对象(父对象)，通过 <code>__proto__</code> 属性来连接对象直到 null 的一条链即为我们所谓的原型链。</p>\n<p>  <code>constructor</code> 是由对象指向它的构造函数，每个对象都有构造函数（本身拥有或继承而来。Function 这个对象比较特殊，它的构造函数就是它自己（因为 Function 可以看成是一个函数，也可以是一个对象），所有函数和对象最终都是由 Function 构造函数得来，所以 constructor 属性的终点就是 Function 这个函数。</p>\n</li>\n<li><p><code>prototype</code> 属性是<strong>函数</strong>所独有的，它是从一个函数指向它的的原型对象。因为 JS 内函数也是对象，因而函数也具有对象的一切属性。<br>上面的例子中 <code>f1.__proto__ === Foo.prototype</code>。</p>\n<p>  对于 prototype 的作用：包含可以由特定类型的所有实例共享的属性和方法，任何函数在创建的时候，都会默认同时创建该函数的prototype对象。</p>\n</li>\n</ul>\n","prev":{"title":"《JavaScript 忍者秘籍》读书笔记","link":"post/js"},"next":{"title":"你可能不知道的 vscode 使用技巧","link":"post/你可能不知道的vscode使用技巧"},"plink":"https://yanoo1497.github.io/post/prototype/"}